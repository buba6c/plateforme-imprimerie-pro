#!/usr/bin/env node

/**
 * üßπ NETTOYAGE COMPLET DONN√âES FRONTEND
 * ===================================
 * Vide le localStorage et force l'utilisation de l'API r√©elle
 */

const fs = require('fs');
const path = require('path');

console.log('üßπ NETTOYAGE DONN√âES FRONTEND');
console.log('============================\n');

// 1. V√©rifier si l'app utilise l'API r√©elle
console.log('1Ô∏è‚É£ V√©rification configuration API...');

try {
    // V√©rifier le fichier de configuration API
    const configPath = path.join(__dirname, 'frontend', 'src', 'services', 'api.js');
    if (fs.existsSync(configPath)) {
        const configContent = fs.readFileSync(configPath, 'utf8');
        if (configContent.includes('localhost:5001')) {
            console.log('‚úÖ Configuration API correcte (localhost:5001)');
        } else {
            console.log('‚ö†Ô∏è  Configuration API √† v√©rifier');
        }
    }

    // V√©rifier si mock est activ√© quelque part
    const mockPath = path.join(__dirname, 'frontend', 'src', 'services', 'mockApi.js');
    if (fs.existsSync(mockPath)) {
        console.log('‚ÑπÔ∏è  Fichier mockApi.js pr√©sent (normal pour dev)');
    }

} catch (error) {
    console.log('‚ö†Ô∏è  Erreur v√©rification config:', error.message);
}

// 2. Instructions pour vider localStorage
console.log('\n2Ô∏è‚É£ Instructions pour vider le cache frontend...');
console.log('');
console.log('üåê Dans votre navigateur (http://localhost:3000) :');
console.log('');
console.log('1. Ouvrir les Outils D√©veloppeur (F12)');
console.log('2. Aller dans l\'onglet "Console"');
console.log('3. Taper cette commande et appuyer Entr√©e :');
console.log('');
console.log('   localStorage.clear(); sessionStorage.clear(); location.reload();');
console.log('');
console.log('üîÑ Ou simplement forcer le rechargement :');
console.log('   Ctrl+Shift+R (PC) / Cmd+Shift+R (Mac)');
console.log('');
console.log('üì± Alternative : Mode navigation priv√©e');
console.log('   Ctrl+Shift+N (PC) / Cmd+Shift+N (Mac)');
console.log('');

// 3. V√©rifier que l'API backend r√©pond
console.log('3Ô∏è‚É£ V√©rification API backend...');

const { spawn } = require('child_process');

const curlProcess = spawn('curl', [
    '-s',
    '-o', '/dev/null',
    '-w', '%{http_code}',
    'http://localhost:5001/api/auth/me'
], { stdio: ['pipe', 'pipe', 'pipe'] });

let output = '';
curlProcess.stdout.on('data', (data) => {
    output += data.toString();
});

curlProcess.on('close', (code) => {
    if (output.trim() === '401' || output.trim() === '200') {
        console.log('‚úÖ API backend r√©pond correctement');
        console.log('');
        console.log('üéØ SOLUTION :');
        console.log('============');
        console.log('1. Vider le cache navigateur (commandes ci-dessus)');
        console.log('2. Vous connecter avec un compte r√©el :');
        console.log('   - admin@imprimerie.local / admin123');
        console.log('   - preparateur@imprimerie.local / admin123');
        console.log('3. L\'interface devrait maintenant √™tre vide (base nettoy√©e)');
        console.log('');
        console.log('‚ú® La base est propre, pr√™te pour de nouveaux dossiers !');
    } else {
        console.log('‚ùå API backend ne r√©pond pas correctement');
        console.log('   V√©rifiez que PM2 fonctionne : pm2 status');
    }
});

curlProcess.on('error', () => {
    console.log('‚ùå Impossible de v√©rifier l\'API (curl non disponible)');
    console.log('   V√©rifiez manuellement : http://localhost:5001/api/auth/me');
});