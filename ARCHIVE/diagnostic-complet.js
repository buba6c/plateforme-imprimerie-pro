#!/usr/bin/env node

/**
 * üïµÔ∏è DIAGNOSTIC COMPLET FRONTEND
 * =============================
 * Simule exactement ce que fait le navigateur
 */

const axios = require('axios');

async function diagnosticComplet() {
    console.log('üïµÔ∏è DIAGNOSTIC COMPLET FRONTEND');
    console.log('=============================\n');

    try {
        // 1. Test route health (utilis√©e par apiAdapter)
        console.log('1Ô∏è‚É£ Test route /health (utilis√©e par apiAdapter)...');
        try {
            const healthResponse = await axios.get('http://localhost:5001/api/health', { timeout: 2000 });
            console.log('‚úÖ Route /health r√©pond correctement');
            console.log(`   Status: ${healthResponse.status}`);
        } catch (error) {
            console.log('‚ùå Route /health ne r√©pond pas');
            console.log(`   Erreur: ${error.message}`);
            return;
        }

        // 2. Simulation compl√®te du flux d'authentification
        console.log('\n2Ô∏è‚É£ Simulation flux d\'authentification frontend...');
        
        // Test login comme le fait le frontend
        const loginData = {
            email: 'admin@imprimerie.local',
            password: 'admin123'
        };
        
        const loginResponse = await axios.post('http://localhost:5001/api/auth/login', loginData);
        const token = loginResponse.data.token;
        console.log('‚úÖ Login frontend simul√© r√©ussi');

        // 3. Test r√©cup√©ration dossiers avec le token (simulation exacte)
        console.log('\n3Ô∏è‚É£ Test getDossiers() comme le frontend...');
        
        const dossiersResponse = await axios.get('http://localhost:5001/api/dossiers', {
            headers: { 
                'Authorization': `Bearer ${token}`,
                'Content-Type': 'application/json'
            }
        });
        
        const dossiers = dossiersResponse.data.dossiers;
        console.log(`üìÇ R√©ponse API: ${dossiers.length} dossier(s)`);
        
        if (dossiers.length === 0) {
            console.log('‚úÖ L\'API retourne bien 0 dossiers');
        } else {
            console.log('‚ö†Ô∏è  L\'API retourne encore des dossiers:');
            dossiers.forEach(d => {
                console.log(`   - ${d.numero_commande} (${d.status}) - ID: ${d.id}`);
            });
        }

        // 4. Test avec diff√©rents r√¥les
        console.log('\n4Ô∏è‚É£ Test avec le r√¥le pr√©parateur...');
        const prepLogin = await axios.post('http://localhost:5001/api/auth/login', {
            email: 'preparateur@imprimerie.local',
            password: 'admin123'
        });
        
        const prepDossiers = await axios.get('http://localhost:5001/api/dossiers', {
            headers: { Authorization: `Bearer ${prepLogin.data.token}` }
        });
        
        console.log(`üë§ Pr√©parateur voit: ${prepDossiers.data.dossiers.length} dossier(s)`);

        // 5. V√©rification des logs PM2
        console.log('\n5Ô∏è‚É£ V√©rification configuration...');
        console.log('üìã Modifications effectu√©es:');
        console.log('   ‚úÖ shouldUseMockApi() ‚Üí false');
        console.log('   ‚úÖ Sauvegarde auto mock d√©sactiv√©e');
        console.log('   ‚úÖ backendAvailable r√©initialis√©');
        console.log('   ‚úÖ Frontend red√©marr√©');

        console.log('\nüéØ DIAGNOSTIC FINAL:');
        console.log('===================');
        if (dossiers.length === 0) {
            console.log('‚úÖ L\'API fonctionne correctement (0 dossiers)');
            console.log('');
            console.log('üåê Si l\'interface affiche encore des dossiers:');
            console.log('1. Vider le localStorage du navigateur');
            console.log('2. Faire un rechargement forc√© (Ctrl+Shift+R)');
            console.log('3. Ouvrir les outils dev (F12) et v√©rifier la console');
            console.log('');
            console.log('üí° Commande localStorage √† ex√©cuter:');
            console.log('   localStorage.clear(); sessionStorage.clear(); location.reload();');
        } else {
            console.log('‚ùå L\'API retourne encore des dossiers');
            console.log('   ‚Üí Probl√®me c√¥t√© backend √† investiguer');
        }

    } catch (error) {
        console.error('‚ùå Erreur diagnostic:', error.message);
        if (error.response) {
            console.error(`   Status: ${error.response.status}`);
            console.error(`   Data:`, error.response.data);
        }
    }
}

diagnosticComplet();