#!/usr/bin/env node

// Test de diagnostic pour identifier la source des anciens dossiers

const axios = require('axios').default;

async function main() {
  console.log('üîç DIAGNOSTIC - Tra√ßage de la source des dossiers CMD-2024-xxx');
  console.log('=============================================================\n');
  
  try {
    // 1. Test API sant√©
    console.log('1. üè• Test API Backend:');
    const healthResponse = await axios.get('http://localhost:5001/api/health');
    console.log(`   ‚úÖ Backend op√©rationnel (uptime: ${Math.round(healthResponse.data.uptime)}s)`);
    
    // 2. Test endpoint dossiers sans authentification (pour debug)
    console.log('\n2. üß™ Test endpoint /api/dossiers (sans auth - pour debug):');
    
    try {
      const dossiersResponse = await axios.get('http://localhost:5001/api/dossiers');
      console.log(`   ‚ùå PROBL√àME: L'API a retourn√© des donn√©es sans authentification !`);
      console.log(`   üìã ${dossiersResponse.data.length} dossiers retourn√©s`);
    } catch (error) {
      if (error.response && error.response.status === 401) {
        console.log(`   ‚úÖ Bon: API prot√©g√©e par authentification (401)`);
      } else {
        console.log(`   ‚ö†Ô∏è Erreur inattendue: ${error.message}`);
      }
    }
    
    // 3. Test des services de donn√©es frontend
    console.log('\n3. üìÅ Analyse des services de donn√©es frontend:');
    
    // V√©rifier s'il y a des donn√©es mock ou en cache
    const fs = require('fs');
    const path = require('path');
    
    const frontendPaths = [
      './frontend/src/services/mockApi.js',
      './frontend/src/services/apiAdapter.js', 
      './frontend/src/services/dossiersService.js'
    ];
    
    for (const filePath of frontendPaths) {
      if (fs.existsSync(filePath)) {
        console.log(`   üìÑ Fichier trouv√©: ${filePath}`);
        
        const content = fs.readFileSync(filePath, 'utf8');
        
        // Chercher des r√©f√©rences aux dossiers CMD-2024
        if (content.includes('CMD-2024')) {
          console.log(`      ‚ö†Ô∏è Contient des r√©f√©rences CMD-2024 !`);
        }
        
        // Chercher des donn√©es mock
        if (content.includes('mockDossiers') || content.includes('MOCK_DATA')) {
          console.log(`      ‚ö†Ô∏è Contient des donn√©es mock !`);
        }
        
        // Chercher localStorage
        if (content.includes('localStorage')) {
          console.log(`      ‚ö†Ô∏è Utilise localStorage (peut garder cache) !`);
        }
      }
    }
    
    // 4. Instructions de debug frontend
    console.log('\n4. üîß INSTRUCTIONS DE DEBUG FRONTEND:');
    console.log('');
    console.log('   üì± √âTAPES POUR IDENTIFIER LE PROBL√àME:');
    console.log('');
    console.log('   1. Ouvrez http://localhost:3000 en navigation priv√©e');
    console.log('   2. Appuyez sur F12 (outils d√©veloppeur)'); 
    console.log('   3. Onglet "Network" > Cochez "Disable cache"');
    console.log('   4. Connectez-vous avec un compte');
    console.log('   5. Regardez dans l\'onglet Network:');
    console.log('');
    console.log('   üîç V√âRIFICATIONS √Ä FAIRE:');
    console.log('   - Y a-t-il une requ√™te √† /api/dossiers ?');
    console.log('   - Que retourne cette requ√™te (clic sur la requ√™te > Response) ?');
    console.log('   - Y a-t-il des erreurs 401/403 ?');
    console.log('   - L\'app charge-t-elle des donn√©es depuis localStorage ?');
    console.log('');
    console.log('   üìã ONGLET "Application" (dans F12):');
    console.log('   - Regardez dans "Local Storage" > http://localhost:3000');
    console.log('   - Y a-t-il des donn√©es de dossiers stock√©es ?');
    console.log('   - Si oui, supprimez tout le contenu');
    console.log('');
    console.log('   üßπ NETTOYAGE CACHE COMPLET:');
    console.log('   - F12 > Application > Storage > "Clear storage" > "Clear site data"');
    console.log('   - Ou Param√®tres navigateur > Effacer donn√©es de navigation > Cocher "Donn√©es stock√©es" + "Cache"');
    
    // 5. Test avec diff√©rents navigateurs
    console.log('\n5. üåê TEST MULTI-NAVIGATEURS:');
    console.log('');
    console.log('   üì± Testez avec un navigateur diff√©rent:');
    console.log('   - Si vous utilisez Chrome, essayez Firefox');  
    console.log('   - Si vous utilisez Safari, essayez Chrome');
    console.log('   - Ou utilisez le mode priv√©/incognito');
    console.log('');
    console.log('   ‚úÖ Si les FRESH-xxx apparaissent dans le nouveau navigateur:');
    console.log('      ‚Üí Le probl√®me √©tait bien le cache du premier navigateur');
    console.log('');
    console.log('   ‚ùå Si les CMD-2024-xxx apparaissent encore:');
    console.log('      ‚Üí L\'app utilise des donn√©es mock ou une autre API');
    
    // 6. Commandes de v√©rification
    console.log('\n6. üìã COMMANDES DE V√âRIFICATION:');
    console.log('');
    console.log('   # V√©rifier que la base ne contient que FRESH:');
    console.log('   psql -h localhost -U imprimerie_user -d imprimerie_db -c "SELECT numero_commande FROM dossiers;"');
    console.log('');
    console.log('   # V√©rifier les logs en temps r√©el:');
    console.log('   pm2 logs --lines 0');
    console.log('');
    console.log('   # Red√©marrer compl√®tement si n√©cessaire:');
    console.log('   pm2 delete all && pm2 start');
    
    console.log('\nüéØ CONCLUSION:');
    console.log('');
    console.log('‚úÖ La base de donn√©es est PROPRE (4 dossiers FRESH-xxx uniquement)');
    console.log('‚úÖ Les services sont red√©marr√©s'); 
    console.log('‚ùì Les CMD-2024-xxx viennent du cache navigateur OU de donn√©es mock');
    console.log('');
    console.log('üí° SOLUTION PROBABLE:');
    console.log('   ‚Üí Videz compl√®tement le cache navigateur');
    console.log('   ‚Üí Ou testez en navigation priv√©e');
    console.log('   ‚Üí Ou utilisez un autre navigateur');
    
  } catch (error) {
    console.error('\n‚ùå Erreur lors du diagnostic:', error.message);
  }
}

main().catch(console.error);