/**
 * Test complet des fonctionnalit√©s de devis
 */

const dbHelper = require('./backend/utils/dbHelper');
const openaiService = require('./backend/services/openaiService');
const axios = require('axios');

console.log('=== TEST COMPLET DES DEVIS ===\n');

const API_URL = 'http://localhost:5001/api';

// Fonction pour obtenir un token admin (simulation)
async function getAdminToken() {
  try {
    // R√©cup√©rer un utilisateur admin
    const [admins] = await dbHelper.query("SELECT * FROM users WHERE role = 'admin' LIMIT 1");
    if (admins.length === 0) {
      throw new Error('Aucun utilisateur admin trouv√©');
    }
    
    // Pour les tests, on simule un token - en production, il faudrait se connecter via l'API
    return 'test-admin-token-' + admins[0].id;
  } catch (error) {
    console.log('‚ö†Ô∏è  Impossible de r√©cup√©rer un token admin, utilisation d\'un token de test');
    return 'test-token';
  }
}

(async () => {
  try {
    // 1. Test des devis existants
    console.log('1. V√©rification des devis existants...');
    const [existingDevis] = await dbHelper.query(`
      SELECT d.*, u.prenom, u.nom 
      FROM devis d 
      LEFT JOIN users u ON d.user_id = u.id 
      ORDER BY d.created_at DESC 
      LIMIT 5
    `);
    
    console.log(`‚úÖ ${existingDevis.length} devis trouv√©s dans la base`);
    
    if (existingDevis.length > 0) {
      console.log('\nüìã Devis existants:');
      existingDevis.forEach((devis, index) => {
        console.log(`   ${index + 1}. ${devis.numero} (${devis.machine_type})`);
        console.log(`      - Client: ${devis.client_nom || 'Non renseign√©'}`);
        console.log(`      - Prix: ${devis.prix_estime} FCFA`);
        console.log(`      - Statut: ${devis.statut}`);
        console.log(`      - Cr√©√© par: ${devis.prenom} ${devis.nom}`);
        
        // V√©rifier si l'IA a √©t√© utilis√©e
        if (devis.details_prix) {
          try {
            const details = JSON.parse(devis.details_prix);
            console.log(`      - IA utilis√©e: ${details.ia_used ? '‚úÖ OUI' : '‚ùå NON'}`);
          } catch (e) {
            console.log(`      - IA utilis√©e: ‚ùì Ind√©termin√©`);
          }
        }
        console.log('');
      });
    }
    
    // 2. Test de la configuration OpenAI
    console.log('2. Test de la configuration OpenAI...');
    const openaiConfig = await openaiService.getOpenAIConfig();
    
    if (!openaiConfig || !openaiConfig.is_active) {
      console.log('‚ùå OpenAI n\'est pas configur√© ou d√©sactiv√©');
      console.log('üìã Utilisez le script rechiffrer-openai.js pour configurer OpenAI');
    } else {
      console.log('‚úÖ OpenAI configur√© et actif');
      
      const client = await openaiService.getOpenAIClient();
      if (client) {
        console.log('‚úÖ Client OpenAI cr√©√© avec succ√®s');
      } else {
        console.log('‚ùå Impossible de cr√©er le client OpenAI');
        console.log('üí° Utilisez le script rechiffrer-openai.js pour reconfigurer la cl√©');
      }
    }
    
    // 3. Test de cr√©ation d'un nouveau devis
    console.log('\n3. Test de cr√©ation d\'un nouveau devis...');
    
    // R√©cup√©rer un utilisateur pour cr√©er le devis
    const [users] = await dbHelper.query("SELECT * FROM users WHERE role IN ('preparateur', 'admin') LIMIT 1");
    
    if (users.length === 0) {
      console.log('‚ùå Aucun utilisateur trouv√© pour cr√©er un devis');
      return;
    }
    
    const user = users[0];
    console.log(`üìù Cr√©ation d'un devis de test par: ${user.prenom} ${user.nom}`);
    
    // Donn√©es de test pour un devis Roland
    const testRolandData = {
      client: 'Test Client IA',
      type_support: 'B√¢che',
      largeur: '300',
      hauteur: '200',
      unite: 'cm',
      nombre_exemplaires: '1',
      finition_oeillets: 'Oeillet',
      finition_position: 'Angles seulement'
    };
    
    // R√©cup√©rer les tarifs Roland
    const [tarifs] = await dbHelper.query('SELECT * FROM tarifs_config WHERE actif = TRUE AND type_machine = $1', ['roland']);
    console.log(`‚úÖ ${tarifs.length} tarifs Roland trouv√©s`);
    
    // Faire l'estimation
    console.log('üßÆ Calcul de l\'estimation...');
    const estimation = await openaiService.estimateQuote(testRolandData, 'roland', tarifs, openaiConfig?.knowledge_base_text);
    
    console.log(`üìä R√©sultat de l'estimation:`);
    console.log(`   - Prix estim√©: ${estimation.prix_estime} FCFA`);
    console.log(`   - IA utilis√©e: ${estimation.ia_used ? '‚úÖ OUI' : '‚ùå NON (fallback manuel)'}`);
    console.log(`   - Mod√®le: ${estimation.model || 'Manuel'}`);
    
    if (estimation.explanation) {
      console.log(`   - Explication: ${estimation.explanation.substring(0, 100)}...`);
    }
    
    // Cr√©er le devis en base
    console.log('\nüíæ Sauvegarde du devis de test...');
    const numero = `DEVIS-TEST-${Date.now()}`;
    
    const [insertResult] = await dbHelper.query(`
      INSERT INTO devis (
        numero, user_id, machine_type, data_json, client_nom, client_contact,
        prix_estime, prix_final, details_prix, notes, statut
      ) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11)
      RETURNING id
    `, [
      numero,
      user.id,
      'roland',
      JSON.stringify(testRolandData),
      'Test Client IA - Script',
      'test@example.com',
      estimation.prix_estime,
      estimation.prix_estime,
      JSON.stringify(estimation.details || {}),
      'Devis de test cr√©√© automatiquement pour v√©rifier l\'IA',
      'brouillon'
    ]);
    
    const newDevisId = insertResult[0].id;
    console.log(`‚úÖ Devis de test cr√©√© avec l'ID: ${newDevisId}`);
    console.log(`   - Num√©ro: ${numero}`);
    
    // Ajouter √† l'historique
    await dbHelper.query(`
      INSERT INTO devis_historique (devis_id, user_id, action, nouveau_statut)
      VALUES ($1, $2, $3, $4)
    `, [newDevisId, user.id, 'creation', 'brouillon']);
    
    // 4. Test du bouton "Voir" (simulation)
    console.log('\n4. Test de r√©cup√©ration des d√©tails (simulation bouton "Voir")...');
    
    const [devisDetails] = await dbHelper.query('SELECT * FROM v_devis_complet WHERE id = $1', [newDevisId]);
    
    if (devisDetails.length > 0) {
      const devis = devisDetails[0];
      console.log('‚úÖ D√©tails du devis r√©cup√©r√©s:');
      console.log(`   - Num√©ro: ${devis.numero}`);
      console.log(`   - Client: ${devis.client_nom}`);
      console.log(`   - Machine: ${devis.machine_type}`);
      console.log(`   - Prix: ${devis.prix_estime} FCFA`);
      console.log(`   - Statut: ${devis.statut}`);
      console.log(`   - Cr√©√© le: ${devis.created_at}`);
      
      // Parser les donn√©es JSON
      try {
        const dataJson = JSON.parse(devis.data_json);
        console.log('‚úÖ Donn√©es techniques pars√©es avec succ√®s');
        console.log(`   - Support: ${dataJson.type_support}`);
        console.log(`   - Dimensions: ${dataJson.largeur} √ó ${dataJson.hauteur} ${dataJson.unite}`);
      } catch (e) {
        console.log('‚ùå Erreur parsing donn√©es JSON');
      }
    }
    
    // 5. R√©sum√© final
    console.log('\n=== R√âSUM√â DES TESTS ===');
    console.log(`‚úÖ Devis existants: ${existingDevis.length} trouv√©s`);
    console.log(`${openaiConfig && openaiConfig.is_active ? '‚úÖ' : '‚ùå'} Configuration OpenAI: ${openaiConfig && openaiConfig.is_active ? 'Active' : 'Inactive/Manquante'}`);
    console.log(`‚úÖ Nouveau devis cr√©√©: ${numero}`);
    console.log(`${estimation.ia_used ? '‚úÖ' : '‚ö†Ô∏è'} Estimation IA: ${estimation.ia_used ? 'Fonctionnelle' : 'Fallback manuel utilis√©'}`);
    console.log('‚úÖ R√©cup√©ration d√©tails: Fonctionnelle');
    
    if (!estimation.ia_used) {
      console.log('\nüí° Pour activer l\'estimation IA:');
      console.log('   1. Ex√©cutez: node rechiffrer-openai.js');
      console.log('   2. Saisissez votre cl√© API OpenAI');
      console.log('   3. Testez √† nouveau avec ce script');
    } else {
      console.log('\nüéâ Tous les tests sont r√©ussis! Le syst√®me de devis avec IA fonctionne parfaitement.');
    }
    
  } catch (error) {
    console.error('‚ùå Erreur lors des tests:', error.message);
    console.error(error);
  } finally {
    process.exit(0);
  }
})();