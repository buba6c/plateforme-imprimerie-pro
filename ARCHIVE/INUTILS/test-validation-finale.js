#!/usr/bin/env node
/**
 * üß™ TEST FINAL VALIDATION COMPL√àTE
 * Validation que tout fonctionne apr√®s correction
 */

const axios = require('axios');

const API_BASE_URL = 'http://localhost:5001/api';
const FRONTEND_URL = 'http://localhost:3000';

async function testFinalValidation() {
  console.log('üéØ VALIDATION FINALE SYST√àME COMPLET');
  console.log('====================================\n');
  
  try {
    // 1. Authentification avec diff√©rents r√¥les
    console.log('üîê 1. Tests authentification multi-r√¥les...');
    
    const roles = [
      { email: 'admin@imprimerie.local', role: 'admin' },
      { email: 'preparateur@imprimerie.local', role: 'preparateur' },
      { email: 'roland@imprimerie.local', role: 'imprimeur_roland' }
    ];
    
    for (const account of roles) {
      const response = await axios.post(`${API_BASE_URL}/auth/login`, {
        email: account.email,
        password: 'admin123'
      });
      console.log(`   ‚úÖ ${account.role}: Authentifi√©`);
    }
    
    // 2. Test cr√©ation avec admin (maintenant autoris√©)
    console.log('\nüìù 2. Test cr√©ation dossier avec admin...');
    const adminAuth = await axios.post(`${API_BASE_URL}/auth/login`, {
      email: 'admin@imprimerie.local',
      password: 'admin123'
    });
    
    const createWithAdmin = await axios.post(`${API_BASE_URL}/dossiers`, {
      client: 'Test Final Admin',
      machine: 'Xerox',
      description: 'Test validation finale avec admin',
      quantite: 50,
      client_email: 'final@test.com'
    }, {
      headers: { Authorization: `Bearer ${adminAuth.data.token}` }
    });
    
    console.log(`   ‚úÖ Dossier cr√©√© par admin: ${createWithAdmin.data.dossier.numero_commande}`);
    const adminDossierId = createWithAdmin.data.dossier.id;
    
    // 3. Test cr√©ation avec pr√©parateur
    console.log('\nüìù 3. Test cr√©ation dossier avec pr√©parateur...');
    const prepAuth = await axios.post(`${API_BASE_URL}/auth/login`, {
      email: 'preparateur@imprimerie.local',
      password: 'admin123'
    });
    
    const createWithPrep = await axios.post(`${API_BASE_URL}/dossiers`, {
      client: 'Test Final Pr√©parateur',
      machine: 'Roland',
      description: 'Test validation finale avec pr√©parateur',
      quantite: 75
    }, {
      headers: { Authorization: `Bearer ${prepAuth.data.token}` }
    });
    
    console.log(`   ‚úÖ Dossier cr√©√© par pr√©parateur: ${createWithPrep.data.dossier.numero_commande}`);
    const prepDossierId = createWithPrep.data.dossier.id;
    
    // 4. Test r√©cup√©ration avec filtrage par r√¥le
    console.log('\nüóÇÔ∏è 4. Test filtrage par r√¥le...');
    
    // Admin voit tout
    const adminDossiers = await axios.get(`${API_BASE_URL}/dossiers`, {
      headers: { Authorization: `Bearer ${adminAuth.data.token}` }
    });
    console.log(`   üëë Admin voit ${adminDossiers.data.dossiers.length} dossiers (total)`);
    
    // Pr√©parateur voit seulement ses dossiers
    const prepDossiers = await axios.get(`${API_BASE_URL}/dossiers`, {
      headers: { Authorization: `Bearer ${prepAuth.data.token}` }
    });
    console.log(`   üë§ Pr√©parateur voit ${prepDossiers.data.dossiers.length} dossiers (ses cr√©ations)`);
    
    // 5. Test changement de statut
    console.log('\nüîÑ 5. Test workflow statuts...');
    
    // Roland authentifi√© pour changer statuts
    const rolandAuth = await axios.post(`${API_BASE_URL}/auth/login`, {
      email: 'roland@imprimerie.local',
      password: 'admin123'
    });
    
    // Roland change statut d'un dossier Roland
    const rolandDossiers = await axios.get(`${API_BASE_URL}/dossiers`, {
      headers: { Authorization: `Bearer ${rolandAuth.data.token}` }
    });
    
    if (rolandDossiers.data.dossiers.length > 0) {
      const dossierRoland = rolandDossiers.data.dossiers.find(d => d.machine === 'Roland');
      if (dossierRoland) {
        await axios.put(`${API_BASE_URL}/dossiers/${dossierRoland.id}/statut`, {
          nouveau_statut: 'En impression',
          commentaire: 'Impression lanc√©e - test validation'
        }, {
          headers: { Authorization: `Bearer ${rolandAuth.data.token}` }
        });
        console.log(`   üîÑ Roland: ${dossierRoland.numero_commande} ‚Üí En impression`);
      }
    }
    
    // 6. Validation pr√©parateur
    console.log('\n‚úÖ 6. Test validation pr√©parateur...');
    
    // Cr√©er un fichier test pour permettre la validation
    const fs = require('fs');
    const FormData = require('form-data');
    
    // Cr√©er un fichier temporaire
    const tempFile = '/tmp/test-validation.pdf';
    fs.writeFileSync(tempFile, 'Contenu PDF test');
    
    // Upload du fichier
    const form = new FormData();
    form.append('files', fs.createReadStream(tempFile));
    
    try {
      await axios.post(`${API_BASE_URL}/dossiers/${prepDossierId}/fichiers`, form, {
        headers: { 
          Authorization: `Bearer ${prepAuth.data.token}`,
          ...form.getHeaders()
        }
      });
      
      // Valider le dossier
      await axios.put(`${API_BASE_URL}/dossiers/${prepDossierId}/valider`, {
        commentaire: 'Dossier valid√© - test final'
      }, {
        headers: { Authorization: `Bearer ${prepAuth.data.token}` }
      });
      
      console.log(`   ‚úÖ Dossier ${createWithPrep.data.dossier.numero_commande} valid√© avec fichier`);
      
      // Nettoyer
      fs.unlinkSync(tempFile);
    } catch (error) {
      console.log('   ‚ö†Ô∏è Upload/validation non test√©s (FormData/fichiers)');
    }
    
    // 7. Nettoyage des dossiers de test
    console.log('\nüßπ 7. Nettoyage...');
    
    await axios.delete(`${API_BASE_URL}/dossiers/${adminDossierId}`, {
      headers: { Authorization: `Bearer ${adminAuth.data.token}` }
    });
    
    await axios.delete(`${API_BASE_URL}/dossiers/${prepDossierId}`, {
      headers: { Authorization: `Bearer ${adminAuth.data.token}` }
    });
    
    console.log('   ‚úÖ Dossiers de test supprim√©s');
    
    console.log('\nüéâ VALIDATION FINALE R√âUSSIE !');
    console.log('==============================');
    console.log('‚úÖ Authentification multi-r√¥les');
    console.log('‚úÖ Cr√©ation dossier admin & pr√©parateur');
    console.log('‚úÖ Filtrage par r√¥le');
    console.log('‚úÖ Workflow changement statuts');
    console.log('‚úÖ Validation pr√©parateur');
    console.log('‚úÖ CRUD complet');
    console.log('\nüöÄ SYST√àME PR√äT POUR UTILISATION !');
    console.log('\nüìç Frontend: http://localhost:3000/moderne');
    
  } catch (error) {
    console.error('‚ùå Erreur durant la validation:', error.message);
    
    if (error.response) {
      console.error('üìã D√©tails erreur:');
      console.error('   Status:', error.response.status);
      console.error('   Data:', JSON.stringify(error.response.data, null, 2));
    }
  }
}

testFinalValidation();