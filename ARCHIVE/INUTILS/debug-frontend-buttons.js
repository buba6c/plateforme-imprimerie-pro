#!/usr/bin/env node
/**
 * Debug: Test des boutons frontend en simulant les appels API
 * Reproduit le probl√®me "dossier non trouv√©" lors des clics de boutons
 */

const axios = require('axios');

const API_BASE = 'http://localhost:5001/api';

async function debugFrontendButtons() {
  console.log('üîß DEBUG: Simulation des clics de boutons frontend\n');

  try {
    // 1. Authentification admin
    console.log('1Ô∏è‚É£ Connexion admin...');
    const loginResponse = await axios.post(`${API_BASE}/auth/login`, {
      email: 'admin@imprimerie.local',
      password: 'admin123'
    });

    if (!loginResponse.data?.token) {
      throw new Error('√âchec connexion admin - pas de token');
    }

    const token = loginResponse.data.token;
    console.log('   ‚úÖ Admin connect√©');

    // 2. R√©cup√©rer la liste des dossiers (comme l'interface)
    console.log('\n2Ô∏è‚É£ R√©cup√©ration des dossiers...');
    const dossiersResponse = await axios.get(`${API_BASE}/dossiers`, {
      headers: { Authorization: `Bearer ${token}` }
    });

    console.log(`   üìÅ ${dossiersResponse.data.dossiers.length} dossiers trouv√©s`);
    
    // Afficher tous les dossiers pour voir leurs statuts
    console.log('\nüìã Liste des dossiers disponibles:');
    dossiersResponse.data.dossiers.forEach((d, i) => {
      console.log(`   ${i+1}. ${d.id.substring(0,8)}... - ${d.client} - Statut: ${d.statut} - Valid√©: ${d.valide_preparateur}`);
    });

    if (dossiersResponse.data.dossiers.length === 0) {
      console.log('‚ö†Ô∏è Aucun dossier pour tester les boutons');
      return;
    }

    // 3. Prendre un dossier √† revoir ou en cours (pas livr√©)
    const testDossier = dossiersResponse.data.dossiers.find(d => 
      d.statut === 'a_revoir'
    ) || dossiersResponse.data.dossiers.find(d => 
      d.statut === 'en_cours'
    ) || dossiersResponse.data.dossiers.find(d => 
      ['En cours', '√Ä revoir', 'En impression'].includes(d.statut)
    ) || dossiersResponse.data.dossiers[0];
    console.log(`\n3Ô∏è‚É£ Test sur dossier: ${testDossier.id.substring(0, 8)}...`);
    console.log(`   Client: ${testDossier.client}`);
    console.log(`   Statut: ${testDossier.statut}`);
    console.log(`   Valid√© pr√©parateur: ${testDossier.valide_preparateur || 'false'}`);

    // 4. Tester l'acc√®s aux d√©tails (comme quand on clique sur un dossier)
    console.log('\n4Ô∏è‚É£ Test acc√®s d√©tails dossier...');
    try {
      const detailsResponse = await axios.get(`${API_BASE}/dossiers/${testDossier.id}`, {
        headers: { Authorization: `Bearer ${token}` }
      });
      console.log('   ‚úÖ Acc√®s d√©tails: OK');
      console.log(`   Dossier charg√©: ${detailsResponse.data.dossier?.client || 'N/A'}`);
    } catch (detailsError) {
      console.log('   ‚ùå Erreur acc√®s d√©tails:');
      console.log(`      Status: ${detailsError.response?.status}`);
      console.log(`      Message: ${detailsError.response?.data?.message}`);
      console.log(`      URL: ${detailsError.config?.url}`);
      return;
    }

    // 5. Tester les actions admin selon le statut actuel
    console.log('\n5Ô∏è‚É£ Test des actions admin...');

    const actions = [];
    
    // Selon le statut actuel, d√©terminer les actions possibles
    console.log(`   üîç Statut exact du dossier: "${testDossier.statut}"`);
    switch (testDossier.statut) {
      case 'en_cours':
      case 'En cours':
        actions.push({ label: 'Marquer √† revoir', status: 'a_revoir', requires_comment: true });
        actions.push({ label: 'Valider pour impression', status: 'en_impression' });
        break;
      case 'a_revoir':
      case '√Ä revoir':
        actions.push({ label: 'Remettre en cours', status: 'en_cours' });
        actions.push({ label: 'Valider pour impression', status: 'en_impression' });
        break;
      case 'en_impression':
      case 'En impression':
        actions.push({ label: 'Marquer termin√©', status: 'termine' });
        actions.push({ label: 'Remettre √† revoir', status: 'a_revoir', requires_comment: true });
        break;
      case 'termine':
      case 'Termin√©':
        actions.push({ label: 'Programmer livraison', status: 'en_livraison' });
        break;
    }

    console.log(`   Actions possibles: ${actions.length}`);

    // 6. Tester chaque action
    for (let i = 0; i < actions.length && i < 2; i++) { // Limiter √† 2 tests
      const action = actions[i];
      console.log(`\n6Ô∏è‚É£.${i+1} Test action: ${action.label}`);
      
      try {
        // Simuler l'appel API frontend -> backend
        const payload = {
          nouveau_statut: {
            'en_cours': 'En cours',
            'a_revoir': '√Ä revoir', 
            'en_impression': 'En impression',
            'termine': 'Termin√©',
            'en_livraison': 'En livraison'
          }[action.status] || action.status,
          commentaire: action.requires_comment ? 'Test de changement de statut' : null
        };

        console.log(`   üì° PUT /dossiers/${testDossier.id}/statut`);
        console.log(`   üì¶ Payload:`, JSON.stringify(payload, null, 2));

        const actionResponse = await axios.put(
          `${API_BASE}/dossiers/${testDossier.id}/statut`, 
          payload,
          { headers: { Authorization: `Bearer ${token}` } }
        );

        if (actionResponse.data?.success) {
          console.log(`   ‚úÖ Action r√©ussie: ${action.label}`);
          console.log(`   üìÑ Nouveau statut: ${actionResponse.data.dossier?.statut}`);
        } else {
          console.log(`   ‚ö†Ô∏è Action √©chou√©e (pas de success=true)`);
        }

      } catch (actionError) {
        console.log(`   ‚ùå ERREUR lors de l'action "${action.label}":`);
        console.log(`      Status HTTP: ${actionError.response?.status}`);
        console.log(`      Message: ${actionError.response?.data?.message}`);
        console.log(`      Code: ${actionError.response?.data?.code}`);
        console.log(`      URL: ${actionError.config?.url}`);
        
        if (actionError.response?.data?.message?.includes('non trouv√©')) {
          console.log('   üîç BINGO! Voici l\'erreur "dossier non trouv√©"');
          console.log('      Analysons les d√©tails...');
          console.log(`      Dossier ID utilis√©: ${testDossier.id}`);
          console.log(`      Token valide: ${!!token}`);
          console.log(`      Headers envoy√©s:`, actionError.config?.headers || 'N/A');
        }
      }

      // Petite pause entre les tests
      await new Promise(resolve => setTimeout(resolve, 1000));
    }

    // 7. Test sp√©cifique validateDossier si pas encore valid√©
    if (!testDossier.valide_preparateur) {
      console.log('\n7Ô∏è‚É£ Test validateDossier (route sp√©cifique)...');
      try {
        const validateResponse = await axios.put(
          `${API_BASE}/dossiers/${testDossier.id}/valider`,
          { commentaire: 'Test validation' },
          { headers: { Authorization: `Bearer ${token}` } }
        );

        console.log('   ‚úÖ Validation r√©ussie');
      } catch (validateError) {
        console.log('   ‚ùå Erreur validation:');
        console.log(`      Status: ${validateError.response?.status}`);
        console.log(`      Message: ${validateError.response?.data?.message}`);
      }
    }

    console.log('\n‚úÖ Tests termin√©s!');

  } catch (error) {
    console.error('‚ùå Erreur globale:', error.message);
    
    if (error.response) {
      console.error('üìã D√©tails erreur:');
      console.error('   Status:', error.response.status);
      console.error('   Data:', JSON.stringify(error.response.data, null, 2));
      console.error('   URL:', error.config?.url || 'N/A');
    }
  }
}

// Test direct si appel√© en ligne de commande
if (require.main === module) {
  debugFrontendButtons().then(() => process.exit(0)).catch(err => {
    console.error('üí• Erreur fatale:', err);
    process.exit(1);
  });
}

module.exports = { debugFrontendButtons };