#!/usr/bin/env node

/**
 * Test sp√©cifique des changements de statut apr√®s corrections
 */

const axios = require('axios');

const API_URL = 'http://localhost:5001/api';

async function authenticate() {
  try {
    const response = await axios.post(`${API_URL}/auth/login`, {
      email: 'admin@imprimerie.local',
      password: 'admin123'
    });
    console.log(`‚úÖ Connexion r√©ussie`);
    return response.data.token;
  } catch (error) {
    console.log(`‚ùå √âchec connexion: ${error.response?.data?.message || error.message}`);
    return null;
  }
}

async function testStatusChanges() {
  console.log('üöÄ TEST SP√âCIFIQUE: Changements de statut\n');
  
  const token = await authenticate();
  if (!token) {
    console.log('‚ùå Impossible de s\'authentifier');
    return;
  }
  
  try {
    // R√©cup√©rer les dossiers
    const dossiersResponse = await axios.get(`${API_URL}/dossiers`, {
      headers: { Authorization: `Bearer ${token}` }
    });
    
    const dossiers = dossiersResponse.data.dossiers || [];
    console.log(`üìã ${dossiers.length} dossiers disponibles`);
    
    if (dossiers.length === 0) {
      console.log('‚ùå Aucun dossier pour tester');
      return;
    }
    
    // Tester avec les 3 premiers dossiers
    for (let i = 0; i < Math.min(3, dossiers.length); i++) {
      const dossier = dossiers[i];
      console.log(`\n${'='.repeat(60)}`);
      console.log(`üéØ Dossier: ${dossier.numero} - Statut: ${dossier.statut}`);
      
      // Transitions logiques selon l'√©tat actuel
      const nextTransitions = getValidTransitionsForAdmin(dossier.statut);
      
      if (nextTransitions.length === 0) {
        console.log('   ‚ö†Ô∏è  Aucune transition d√©finie pour cet √©tat');
        continue;
      }
      
      // Tester la premi√®re transition valide
      const targetStatus = nextTransitions[0];
      console.log(`   üîÑ Test: ${dossier.statut} ‚Üí ${targetStatus}`);
      
      try {
        const response = await axios.put(`${API_URL}/dossiers/${dossier.id}/statut`, {
          nouveau_statut: targetStatus
        }, {
          headers: { Authorization: `Bearer ${token}` }
        });
        
        if (response.status === 200) {
          console.log(`   ‚úÖ Changement r√©ussi !`);
          console.log(`   üìÑ Message: ${response.data.message}`);
        }
      } catch (error) {
        const status = error.response?.status;
        const message = error.response?.data?.message || error.message;
        
        if (status === 403) {
          console.log(`   ‚ùå Non autoris√©: ${message}`);
        } else if (status === 400) {
          console.log(`   ‚ùå Requ√™te invalide: ${message}`);
        } else {
          console.log(`   ‚ùå Erreur ${status}: ${message}`);
        }
      }
    }
    
    console.log(`\n${'='.repeat(80)}`);
    console.log('üéâ TEST TERMIN√â');
    console.log('='.repeat(80));
    
  } catch (error) {
    console.log(`‚ùå Erreur test: ${error.message}`);
  }
}

function getValidTransitionsForAdmin(currentStatus) {
  // Transitions valides pour admin selon les r√®gles modifi√©es
  const adminTransitions = {
    '√Ä revoir': ['En cours', 'En impression', 'Pr√™t impression', 'Imprim√©', 'Termin√©'],
    'En cours': ['√Ä revoir', 'Pr√™t impression', 'En impression', 'Imprim√©', 'Termin√©'],
    'Pr√™t impression': ['En impression', '√Ä revoir', 'En cours', 'Imprim√©', 'Termin√©'],
    'En impression': ['Imprim√©', '√Ä revoir', 'En cours', 'Pr√™t impression', 'Termin√©'],
    'Imprim√©': ['Pr√™t livraison', 'En impression', '√Ä revoir', 'En cours', 'Termin√©'],
    'Pr√™t livraison': ['En livraison', 'Imprim√©', 'En impression', 'Termin√©'],
    'En livraison': ['Livr√©', 'Pr√™t livraison', 'Imprim√©', 'Termin√©'],
    'Livr√©': ['Termin√©', 'Pr√™t livraison', 'En livraison', 'En cours', 'Imprim√©'],
    'Termin√©': ['Livr√©', 'En cours', '√Ä revoir'],
    'termine': ['Livr√©', 'En cours', '√Ä revoir'], // format underscore
    'en_cours': ['√Ä revoir', 'Pr√™t impression', 'En impression', 'Imprim√©', 'Termin√©'],
    'en_impression': ['Imprim√©', '√Ä revoir', 'En cours', 'Pr√™t impression', 'Termin√©'],
  };
  
  return adminTransitions[currentStatus] || ['En cours'];
}

testStatusChanges().catch(console.error);