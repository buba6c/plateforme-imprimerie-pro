/**
 * TEST DEBUG - V√©rifier l'authentification et le token
 */

const axios = require('axios');

const API_BASE = 'http://localhost:5001/api';
const ADMIN_TOKEN = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6NywiZW1haWwiOiJhZG1pbkBpbXByaW1lcmllLmNvbSIsInJvbGUiOiJhZG1pbiIsIm5vbSI6IkFkbWluIFByaW5jaXBhbCIsImlhdCI6MTc1OTY2MjIxMywiZXhwIjoxNzU5NzQ4NjEzfQ.EfFlkspaV6tsQ99Jc4HQ5nCClbMFbNATIzCXkq92bw4';

async function debugAuth() {
  console.log('üîç DEBUG - Authentification et token');
  console.log('='.repeat(40));

  try {
    // 1. V√©rifier que le token fonctionne sur une route basique
    console.log('\nüìã 1. TEST - Token sur route basique...');
    try {
      const userResponse = await axios.get(`${API_BASE}/auth/me`, {
        headers: { Authorization: `Bearer ${ADMIN_TOKEN}` }
      });
      console.log('‚úÖ Token valide sur /auth/me');
      console.log(`   User: ${userResponse.data.user?.nom || 'N/A'}`);
      console.log(`   Role: ${userResponse.data.user?.role || 'N/A'}`);
    } catch (error) {
      console.log(`‚ùå Token invalide: ${error.response?.status} - ${error.response?.statusText}`);
      if (error.response?.data) {
        console.log('   Erreur:', error.response.data);
      }
    }

    // 2. Tester l'authentification sur la route files
    console.log('\nüìÑ 2. TEST - Authentification route files...');
    try {
      const filesListResponse = await axios.get(`${API_BASE}/files`, {
        headers: { Authorization: `Bearer ${ADMIN_TOKEN}` }
      });
      console.log(`‚úÖ Route /files accessible (${filesListResponse.status})`);
    } catch (error) {
      console.log(`‚ùå Route /files inaccessible: ${error.response?.status}`);
      if (error.response?.data) {
        console.log('   Erreur:', error.response.data);
      }
    }

    // 3. Tester sp√©cifiquement la route preview
    console.log('\nüëÅÔ∏è 3. TEST - Route preview sp√©cifique...');
    const testFileId = '8b8cd4c2-a309-4ba3-8732-e9dc9f2a35eb'; // ID d'un fichier de test
    
    try {
      const previewResponse = await axios.get(`${API_BASE}/files/preview/${testFileId}`, {
        headers: { 
          'Authorization': `Bearer ${ADMIN_TOKEN}`,
          'Accept': '*/*'
        },
        validateStatus: () => true // Accept tous les status codes pour voir la r√©ponse
      });
      
      console.log(`üìä Response Status: ${previewResponse.status}`);
      console.log(`üìä Response Headers:`, Object.keys(previewResponse.headers));
      
      if (previewResponse.status === 401) {
        console.log('‚ùå Erreur 401 - Non autoris√©');
        console.log('   Response:', previewResponse.data);
      } else if (previewResponse.status === 404) {
        console.log('‚ö†Ô∏è Erreur 404 - Fichier non trouv√©');
        console.log('   Response:', previewResponse.data);
      } else {
        console.log('‚úÖ Route preview accessible');
        console.log(`   Content-Type: ${previewResponse.headers['content-type']}`);
      }
      
    } catch (error) {
      console.log(`‚ùå Erreur lors du test preview: ${error.message}`);
    }

    // 4. V√©rifier le format du token
    console.log('\nüîë 4. ANALYSE DU TOKEN...');
    console.log(`Token utilis√©: ${ADMIN_TOKEN.substring(0, 50)}...`);
    
    // Decoder le JWT pour voir s'il est expir√©
    try {
      const parts = ADMIN_TOKEN.split('.');
      const payload = JSON.parse(atob(parts[1]));
      console.log('üìã Payload JWT:');
      console.log(`   User ID: ${payload.id}`);
      console.log(`   Role: ${payload.role}`);
      console.log(`   Issued at: ${new Date(payload.iat * 1000).toLocaleString()}`);
      console.log(`   Expires at: ${new Date(payload.exp * 1000).toLocaleString()}`);
      
      const now = Math.floor(Date.now() / 1000);
      if (payload.exp < now) {
        console.log('‚ùå TOKEN EXPIR√â !');
      } else {
        console.log('‚úÖ Token encore valide');
      }
      
    } catch (e) {
      console.log('‚ùå Impossible de d√©coder le JWT');
    }

    // 5. Recommandations
    console.log('\nüí° RECOMMANDATIONS:');
    console.log('1. Si le token est expir√©, se reconnecter sur http://localhost:3001');
    console.log('2. V√©rifier que le middleware authenticateToken est bien appliqu√©');
    console.log('3. Contr√¥ler les headers CORS si n√©cessaire');
    console.log('4. Tester avec un nouveau token si probl√®me persiste');

  } catch (error) {
    console.log(`‚ùå Erreur g√©n√©rale: ${error.message}`);
  }
}

debugAuth();