/**
 * Test sp√©cifique de la connexion OpenAI
 */

const openaiService = require('./backend/services/openaiService');
const dbHelper = require('./backend/utils/dbHelper');

console.log('=== TEST CONNEXION OPENAI ===\n');

(async () => {
  try {
    // 1. Test de la configuration
    console.log('1. R√©cup√©ration de la configuration...');
    const config = await openaiService.getOpenAIConfig();
    
    if (!config) {
      console.log('‚ùå Aucune configuration trouv√©e');
      return;
    }
    
    console.log(`‚úÖ Configuration trouv√©e:`);
    console.log(`   - ID: ${config.id}`);
    console.log(`   - Actif: ${config.is_active}`);
    console.log(`   - Cl√© chiffr√©e: ${config.api_key_encrypted ? 'Oui' : 'Non'}`);
    console.log(`   - IV: ${config.api_key_iv ? 'Oui' : 'Non'}`);
    console.log(`   - Base de connaissance: ${config.knowledge_base_text ? config.knowledge_base_text.length + ' caract√®res' : 'Non'}`);
    
    if (!config.is_active) {
      console.log('\n‚ùå OpenAI est d√©sactiv√©');
      return;
    }
    
    if (!config.api_key_encrypted || !config.api_key_iv) {
      console.log('\n‚ùå Cl√© API manquante');
      return;
    }
    
    // 2. Test de d√©chiffrement
    console.log('\n2. Test de d√©chiffrement...');
    try {
      const client = await openaiService.getOpenAIClient();
      if (!client) {
        console.log('‚ùå √âchec de cr√©ation du client OpenAI');
        console.log('üí° La cl√© API n\'a pas pu √™tre d√©chiffr√©e');
        console.log('üìã Solution: Reconfigurez la cl√© API depuis l\'interface admin');
        return;
      }
      
      console.log('‚úÖ Client OpenAI cr√©√© avec succ√®s');
      
      // 3. Test de connexion simple
      console.log('\n3. Test de connexion API...');
      const testResult = await openaiService.testConnection(await getDecryptedKey(config));
      
      if (testResult.success) {
        console.log('‚úÖ Connexion OpenAI r√©ussie!');
        console.log(`   - Mod√®le: ${testResult.model}`);
        console.log(`   - Usage: ${JSON.stringify(testResult.usage)}`);
        
        // 4. Test d'estimation compl√®te
        console.log('\n4. Test d\'estimation compl√®te...');
        
        const testData = {
          type_support: 'B√¢che',
          largeur: '200',
          hauteur: '150',
          unite: 'cm',
          nombre_exemplaires: '2'
        };
        
        const [tarifs] = await dbHelper.query('SELECT * FROM tarifs_config WHERE actif = TRUE AND type_machine = $1', ['roland']);
        
        const estimation = await openaiService.estimateQuote(testData, 'roland', tarifs, config.knowledge_base_text);
        
        console.log('üéâ Estimation r√©ussie!');
        console.log(`   - Prix estim√©: ${estimation.prix_estime} FCFA`);
        console.log(`   - IA utilis√©e: ${estimation.ia_used ? '‚úÖ OUI' : '‚ùå NON'}`);
        console.log(`   - Mod√®le: ${estimation.model || 'Non sp√©cifi√©'}`);
        
        if (estimation.explanation) {
          console.log(`   - Explication: ${estimation.explanation.substring(0, 200)}...`);
        }
        
        if (estimation.recommendations && estimation.recommendations.length > 0) {
          console.log(`   - Recommandations: ${estimation.recommendations.join(', ')}`);
        }
        
        // V√©rifier la mise √† jour du compteur
        const [newConfig] = await dbHelper.query('SELECT total_requests FROM openai_config WHERE id = $1', [config.id]);
        console.log(`   - Compteur requ√™tes: ${newConfig[0].total_requests}`);
        
      } else {
        console.log('‚ùå √âchec de connexion OpenAI');
        console.log(`   - Message: ${testResult.message}`);
        console.log(`   - Code erreur: ${testResult.error}`);
      }
      
    } catch (error) {
      console.log('‚ùå Erreur lors du test de d√©chiffrement:', error.message);
      console.log('üí° La cl√© de chiffrement a peut-√™tre chang√©');
    }
    
  } catch (error) {
    console.error('‚ùå Erreur g√©n√©rale:', error.message);
  } finally {
    process.exit(0);
  }
})();

// Fonction helper pour r√©cup√©rer la cl√© d√©chiffr√©e (pour les tests)
async function getDecryptedKey(config) {
  try {
    const crypto = require('crypto');
    const ENCRYPTION_ALGORITHM = 'aes-256-cbc';
    const ENCRYPTION_KEY_HEX = process.env.ENCRYPTION_KEY || 'a1b2c3d4e5f6a7b8c9d0e1f2a3b4c5d6e7f8a9b0c1d2e3f4a5b6c7d8e9f0a1b2';
    const ENCRYPTION_KEY = Buffer.from(ENCRYPTION_KEY_HEX, 'hex').slice(0, 32);
    
    const decipher = crypto.createDecipheriv(
      ENCRYPTION_ALGORITHM,
      ENCRYPTION_KEY,
      Buffer.from(config.api_key_iv, 'hex')
    );
    
    let decrypted = decipher.update(config.api_key_encrypted, 'hex', 'utf8');
    decrypted += decipher.final('utf8');
    
    return decrypted;
  } catch (error) {
    throw new Error('D√©chiffrement impossible');
  }
}