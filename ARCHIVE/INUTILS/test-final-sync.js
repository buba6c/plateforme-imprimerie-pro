#!/usr/bin/env node

// Test final de synchronisation - V√©rification apr√®s correction

const { query } = require('./backend/config/database');

async function main() {
  console.log('üéØ Test Final - Synchronisation Apr√®s Correction');
  console.log('==============================================\n');
  
  try {
    // 1. √âtat final de la base de donn√©es
    console.log('1. üìä √âtat final de la base de donn√©es:');
    console.log('=' .repeat(40));
    
    const totalResult = await query('SELECT COUNT(*) as count FROM dossiers');
    const totalDossiers = parseInt(totalResult.rows[0].count);
    
    const assignedResult = await query(`
      SELECT COUNT(*) as count FROM dossiers 
      WHERE preparateur_id IS NOT NULL
    `);
    const dossiersAssigned = parseInt(assignedResult.rows[0].count);
    
    const orphanResult = await query(`
      SELECT COUNT(*) as count FROM dossiers 
      WHERE preparateur_id IS NULL
    `);
    const dossiersOrphan = parseInt(orphanResult.rows[0].count);
    
    console.log(`üìã Total dossiers: ${totalDossiers}`);
    console.log(`üë• Dossiers assign√©s: ${dossiersAssigned}`);
    console.log(`üö´ Dossiers orphelins: ${dossiersOrphan}`);
    
    // 2. Simulation de ce que voit chaque r√¥le APR√àS correction
    console.log('\n2. üëÄ Visibilit√© simul√©e apr√®s correction:');
    console.log('=' .repeat(40));
    
    // ADMIN - Voit tout (inchang√©)
    const adminDossiers = await query('SELECT COUNT(*) as count FROM dossiers');
    console.log(`üëë ADMIN voit: ${adminDossiers.rows[0].count}/${totalDossiers} dossiers (100%)`);
    
    // PR√âPARATEUR - Maintenant voit tout (CORRIG√â)
    // Avant: seulement WHERE preparateur_id = user.id
    // Apr√®s: Pas de filtre (tous les dossiers)
    const prepDossiers = await query('SELECT COUNT(*) as count FROM dossiers');
    console.log(`üë®‚Äçüîß PR√âPARATEUR voit: ${prepDossiers.rows[0].count}/${totalDossiers} dossiers (100%) ‚úÖ CORRIG√â`);
    
    // IMPRIMEUR ROLAND - Par type (inchang√©)
    const rolandDossiers = await query(`
      SELECT COUNT(*) as count FROM dossiers WHERE type = 'roland'
    `);
    console.log(`üñ®Ô∏è IMPRIMEUR ROLAND voit: ${rolandDossiers.rows[0].count} dossiers Roland`);
    
    // IMPRIMEUR XEROX - Par type (inchang√©) 
    const xeroxDossiers = await query(`
      SELECT COUNT(*) as count FROM dossiers WHERE type = 'xerox'
    `);
    console.log(`üñ®Ô∏è IMPRIMEUR XEROX voit: ${xeroxDossiers.rows[0].count} dossiers Xerox`);
    
    // 3. Calcul de la synchronisation
    console.log('\n3. üìà Analyse de synchronisation:');
    console.log('=' .repeat(40));
    
    const syncRate = ((dossiersAssigned + dossiersOrphan) / totalDossiers) * 100;
    console.log(`üìä Taux de synchronisation: ${syncRate.toFixed(1)}%`);
    
    if (dossiersOrphan === 0) {
      console.log('‚úÖ PARFAIT: Aucun dossier orphelin');
    } else {
      console.log(`‚ö†Ô∏è ${dossiersOrphan} dossier(s) orphelin(s) restant(s)`);
    }
    
    // 4. D√©tail des dossiers par pr√©parateur
    console.log('\n4. üìã R√©partition d√©taill√©e:');
    console.log('=' .repeat(40));
    
    const repartitionResult = await query(`
      SELECT 
        COALESCE(u.nom, 'Non assign√©') as preparateur_nom,
        COUNT(*) as nb_dossiers,
        ROUND((COUNT(*) * 100.0 / ${totalDossiers}), 1) as pourcentage
      FROM dossiers d
      LEFT JOIN users u ON d.preparateur_id = u.id
      GROUP BY d.preparateur_id, u.nom
      ORDER BY nb_dossiers DESC
    `);
    
    repartitionResult.rows.forEach((row) => {
      console.log(`${row.preparateur_nom}: ${row.nb_dossiers} dossier(s) (${row.pourcentage}%)`);
    });
    
    // 5. Test des statuts workflow
    console.log('\n5. üîÑ V√©rification du workflow:');
    console.log('=' .repeat(40));
    
    const workflowResult = await query(`
      SELECT 
        status,
        COUNT(*) as count,
        ROUND((COUNT(*) * 100.0 / ${totalDossiers}), 1) as pourcentage
      FROM dossiers
      GROUP BY status
      ORDER BY count DESC
    `);
    
    workflowResult.rows.forEach((row) => {
      const emoji = {
        'en_cours': '‚ö°',
        'en_impression': 'üñ®Ô∏è',
        'termine': '‚úÖ',
        'livre': 'üì¶',
        'a_revoir': '‚ö†Ô∏è',
        'en_livraison': 'üöö'
      };
      console.log(`${emoji[row.status] || 'üìã'} ${row.status}: ${row.count} (${row.pourcentage}%)`);
    });
    
    // 6. Conclusion et recommandations
    console.log('\n6. üéØ Conclusion:');
    console.log('=' .repeat(40));
    
    const beforeSyncRate = (dossiersAssigned / totalDossiers) * 100;
    const afterSyncRate = 100; // Tous les r√¥les voient maintenant tous les dossiers
    
    console.log(`üìä Avant correction: ${beforeSyncRate.toFixed(1)}% de visibilit√© pour pr√©parateurs`);
    console.log(`üìä Apr√®s correction: ${afterSyncRate}% de visibilit√© pour pr√©parateurs`);
    console.log(`üìà Am√©lioration: +${(afterSyncRate - beforeSyncRate).toFixed(1)} points`);
    
    if (afterSyncRate === 100) {
      console.log('\nüéâ SUCC√àS COMPLET !');
      console.log('‚úÖ Synchronisation parfaite entre tous les r√¥les');
      console.log('‚úÖ Pr√©parateurs voient maintenant TOUS les dossiers');
      console.log('‚úÖ Workflow op√©rationnel √† 100%');
      console.log('‚úÖ Plus de dossiers invisibles pour les pr√©parateurs');
    } else {
      console.log('\n‚ö†Ô∏è Synchronisation partielle - Am√©liorations possibles');
    }
    
    // 7. Prochaines √©tapes
    console.log('\n7. üöÄ Recommandations:');
    console.log('=' .repeat(40));
    
    if (dossiersOrphan > 0) {
      console.log('üìù Consid√©rer assigner les dossiers orphelins:');
      console.log(`   UPDATE dossiers SET preparateur_id = 2 WHERE preparateur_id IS NULL;`);
    }
    
    console.log('üß™ Tester avec des utilisateurs r√©els pour validation');
    console.log('üìä Monitorer les performances avec le nouveau syst√®me');
    console.log('üîî V√©rifier que les notifications temps r√©el fonctionnent');
    
  } catch (error) {
    console.error('\n‚ùå Erreur lors du test final:', error.message);
    console.error('Stack trace:', error.stack);
  }
}

// Gestion des erreurs
process.on('uncaughtException', (error) => {
  console.error('‚ùå Erreur non g√©r√©e:', error);
  process.exit(1);
});

process.on('unhandledRejection', (error) => {
  console.error('‚ùå Promesse rejet√©e non g√©r√©e:', error);
  process.exit(1);
});

// Lancer le test
main().catch(console.error);