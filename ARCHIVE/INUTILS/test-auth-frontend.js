#!/usr/bin/env node
/**
 * Test pour v√©rifier l'authentification frontend vs backend
 */

const axios = require('axios');

const API_BASE = 'http://localhost:5001/api';

// Test avec diff√©rents sc√©narios d'authentification
async function testFrontendAuth() {
  console.log('üîê TEST AUTHENTIFICATION FRONTEND vs BACKEND\n');

  // 1. Test sans token (cas typique d'erreur frontend)
  console.log('1Ô∏è‚É£ Test sans token d\'authentification...');
  try {
    const response = await axios.get(`${API_BASE}/dossiers`);
    console.log('‚úÖ Succ√®s sans token (inattendu)');
  } catch (error) {
    console.log(`‚ùå Erreur attendue sans token: ${error.response?.status} - ${error.response?.data?.message || error.message}`);
  }

  // 2. Test avec token expir√© (simulation)
  console.log('\n2Ô∏è‚É£ Test avec token expir√©/invalide...');
  try {
    const response = await axios.get(`${API_BASE}/dossiers`, {
      headers: { 'Authorization': 'Bearer invalid_token' }
    });
    console.log('‚úÖ Succ√®s avec token invalide (inattendu)');
  } catch (error) {
    console.log(`‚ùå Erreur attendue token invalide: ${error.response?.status} - ${error.response?.data?.message || error.message}`);
  }

  // 3. Test avec token valide (notre token admin)
  console.log('\n3Ô∏è‚É£ Test avec token admin valide...');
  const ADMIN_TOKEN = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6NywiZW1haWwiOiJhZG1pbkBpbXByaW1lcmllLmNvbSIsInJvbGUiOiJhZG1pbiIsIm5vbSI6IkFkbWluIFByaW5jaXBhbCIsImlhdCI6MTc1OTYwODMzNywiZXhwIjoxNzU5Njk0NzM3fQ.0aQ1ofypzvTO0DMxE5VIfUmuGhDnf2mYcli40AaFyGU';
  
  try {
    const response = await axios.get(`${API_BASE}/dossiers`, {
      headers: { 'Authorization': `Bearer ${ADMIN_TOKEN}` }
    });
    console.log(`‚úÖ Succ√®s avec token admin: ${response.data.dossiers.length} dossiers`);
  } catch (error) {
    console.log(`‚ùå Erreur inattendue token admin: ${error.response?.status} - ${error.response?.data?.message || error.message}`);
  }

  // 4. Test route de login pour g√©n√©rer de nouveaux tokens
  console.log('\n4Ô∏è‚É£ Test authentification pour g√©n√©rer tokens frais...');
  
  const testCredentials = [
    { email: 'admin@imprimerie.com', password: '123456', role: 'admin' },
    { email: 'preparateur@imprimerie.com', password: '123456', role: 'preparateur' },
  ];

  console.log('\nüîë G√©n√©ration de nouveaux tokens:');
  
  for (const cred of testCredentials) {
    try {
      const response = await axios.post(`${API_BASE}/auth/login`, {
        email: cred.email,
        password: cred.password
      });
      
      console.log(`‚úÖ ${cred.role}: Token g√©n√©r√© avec succ√®s`);
      console.log(`   Token: ${response.data.token.substring(0, 50)}...`);
      
      // Test imm√©diat du token g√©n√©r√©
      try {
        const testResponse = await axios.get(`${API_BASE}/dossiers`, {
          headers: { 'Authorization': `Bearer ${response.data.token}` }
        });
        console.log(`   üéØ Test token: ${testResponse.data.dossiers?.length || 0} dossiers visibles`);
      } catch (testError) {
        console.log(`   ‚ùå Erreur test token: ${testError.response?.status}`);
      }
      
    } catch (error) {
      console.log(`‚ùå ${cred.role}: ${error.response?.data?.message || error.message}`);
    }
  }

  console.log('\nüìã RECOMMANDATIONS:');
  console.log('1. Le backend fonctionne parfaitement ‚úÖ');
  console.log('2. Le probl√®me vient de l\'authentification frontend ‚ö†Ô∏è');
  console.log('3. Solutions possibles:');
  console.log('   ‚Ä¢ Tokens expir√©s dans localStorage');
  console.log('   ‚Ä¢ Mauvaise configuration axios frontend');
  console.log('   ‚Ä¢ URL d\'API incorrecte c√¥t√© frontend');
  console.log('   ‚Ä¢ Headers d\'authentification mal transmis');
}

testFrontendAuth();