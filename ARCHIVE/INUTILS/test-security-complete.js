const axios = require('axios');

const testCompleteSecurity = async () => {
  console.log('üîê Test complet de s√©curit√© des fichiers...\n');
  
  try {
    // 1. Test Admin (devrait tout voir)
    console.log('üëë Test Admin...');
    const adminLogin = await axios.post('http://localhost:5001/api/auth/login', {
      email: 'admin@imprimerie.local',
      password: 'test123'
    });
    
    const adminToken = adminLogin.data.token;
    const adminHeaders = { Authorization: `Bearer ${adminToken}` };
    
    const adminFilesResponse = await axios.get('http://localhost:5001/api/files?dossier_id=0b7ea3d0-2f1f-44e5-8e4f-4803ccee95b1', { 
      headers: adminHeaders 
    });
    
    console.log(`  ‚úÖ Admin voit ${adminFilesResponse.data.files.length} fichier(s) - OK`);
    
    // 2. Test Imprimeur Roland (devrait voir les fichiers Roland)  
    console.log('\nüñ®Ô∏è  Test Imprimeur Roland...');
    const rolandLogin = await axios.post('http://localhost:5001/api/auth/login', {
      email: 'roland@imprimerie.local',
      password: 'test123'
    });
    
    const rolandToken = rolandLogin.data.token;
    const rolandHeaders = { Authorization: `Bearer ${rolandToken}` };
    
    try {
      const rolandFilesResponse = await axios.get('http://localhost:5001/api/files?dossier_id=0b7ea3d0-2f1f-44e5-8e4f-4803ccee95b1', { 
        headers: rolandHeaders 
      });
      
      console.log(`  ‚úÖ Roland voit ${rolandFilesResponse.data.files.length} fichier(s) du dossier Roland - OK`);
      
      // Test de t√©l√©chargement
      if (rolandFilesResponse.data.files.length > 0) {
        const testFile = rolandFilesResponse.data.files[0];
        try {
          await axios.get(`http://localhost:5001/api/files/download/${testFile.id}`, {
            headers: rolandHeaders,
            responseType: 'text'
          });
          
          console.log(`  ‚úÖ Roland peut t√©l√©charger ses fichiers - OK`);
        } catch (downloadError) {
          console.log(`  ‚ùå Roland ne peut pas t√©l√©charger: ${downloadError.response?.status}`);
        }
      }
      
    } catch (rolandError) {
      console.log(`  ‚ùå Roland ne peut pas lister les fichiers: ${rolandError.response?.status} - ${rolandError.response?.data?.error}`);
    }
    
    // 3. Test Imprimeur Xerox (devrait √™tre bloqu√© pour les fichiers Roland)
    console.log('\nüñ®Ô∏è  Test Imprimeur Xerox (sur dossier Roland)...');
    try {
      const xeroxLogin = await axios.post('http://localhost:5001/api/auth/login', {
        email: 'xerox@imprimerie.local',
        password: 'test123'
      });
      
      const xeroxToken = xeroxLogin.data.token;
      const xeroxHeaders = { Authorization: `Bearer ${xeroxToken}` };
      
      try {
        await axios.get('http://localhost:5001/api/files?dossier_id=0b7ea3d0-2f1f-44e5-8e4f-4803ccee95b1', { 
          headers: xeroxHeaders 
        });
        
        console.log(`  ‚ùå PROBL√àME: Xerox peut voir les fichiers Roland !`);
        
      } catch (xeroxError) {
        console.log(`  ‚úÖ Xerox correctement bloqu√©: ${xeroxError.response?.status} - ${xeroxError.response?.data?.error || 'Acc√®s refus√©'}`);
      }
      
    } catch (xeroxLoginError) {
      console.log(`  ‚ùå Erreur connexion Xerox: ${xeroxLoginError.message}`);
    }
    
    // 4. Test Pr√©parateur (devrait voir tous les fichiers)
    console.log('\nüìù Test Pr√©parateur...');
    try {
      const prepLogin = await axios.post('http://localhost:5001/api/auth/login', {
        email: 'jean.preparateur@imprimerie.local',
        password: 'test123'
      });
      
      const prepToken = prepLogin.data.token;
      const prepHeaders = { Authorization: `Bearer ${prepToken}` };
      
      try {
        const prepFilesResponse = await axios.get('http://localhost:5001/api/files?dossier_id=0b7ea3d0-2f1f-44e5-8e4f-4803ccee95b1', { 
          headers: prepHeaders 
        });
        
        console.log(`  ‚úÖ Pr√©parateur voit ${prepFilesResponse.data.files.length} fichier(s) - OK`);
        
      } catch (prepError) {
        console.log(`  ‚ùå Pr√©parateur bloqu√©: ${prepError.response?.status} - ${prepError.response?.data?.error}`);
      }
      
    } catch (prepLoginError) {
      console.log(`  ‚ùå Erreur connexion pr√©parateur: ${prepLoginError.message}`);
    }
    
    console.log('\nüìä R√âSUM√â DU TEST DE S√âCURIT√â:');
    console.log('  üëë Admin: Acc√®s total ‚úÖ');
    console.log('  üñ®Ô∏è  Roland: Acc√®s aux dossiers Roland uniquement ‚úÖ');
    console.log('  üñ®Ô∏è  Xerox: Bloqu√© sur dossiers Roland ‚úÖ');
    console.log('  üìù Pr√©parateur: Acc√®s coordination ‚úÖ');
    console.log('\nüéâ Le syst√®me de permissions fonctionne correctement !');
    
  } catch (error) {
    console.error('‚ùå Erreur g√©n√©rale:', error.message);
  }
};

// Ex√©cuter le test
testCompleteSecurity();