#!/usr/bin/env node

// Script de nettoyage et cr√©ation de dossiers de test

const { query } = require('./backend/config/database');

async function main() {
  console.log('üßπ Nettoyage et cr√©ation de dossiers de test');
  console.log('============================================\n');
  
  try {
    // 1. Supprimer tous les dossiers existants
    console.log('1. üóëÔ∏è Suppression des dossiers existants...');
    
    // D'abord supprimer l'historique pour √©viter les contraintes de cl√© √©trang√®re
    const historyDeleteResult = await query('DELETE FROM dossier_status_history');
    console.log(`   üìú ${historyDeleteResult.rowCount || 0} entr√©es d'historique supprim√©es`);
    
    // Ensuite supprimer les dossiers
    const dossiersDeleteResult = await query('DELETE FROM dossiers');
    console.log(`   üìã ${dossiersDeleteResult.rowCount || 0} dossiers supprim√©s`);
    
    // 2. V√©rifier que Jean Pr√©parateur existe
    console.log('\n2. üë®‚Äçüîß V√©rification du pr√©parateur...');
    
    const preparateurCheck = await query(`
      SELECT id, nom, role FROM users 
      WHERE role = 'preparateur' 
      ORDER BY id 
      LIMIT 1
    `);
    
    let preparateurId;
    if (preparateurCheck.rows.length > 0) {
      const prep = preparateurCheck.rows[0];
      preparateurId = prep.id;
      console.log(`   ‚úÖ Pr√©parateur trouv√©: ${prep.nom} (ID: ${prep.id})`);
    } else {
      console.log('   ‚ùå Aucun pr√©parateur trouv√©, cr√©ation d\'un pr√©parateur de test...');
      
      const newPrepResult = await query(`
        INSERT INTO users (nom, email, password_hash, role, created_at, updated_at)
        VALUES ('Jean Pr√©parateur', 'jean.preparateur@evocomprint.com', 'hash123', 'preparateur', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)
        RETURNING id, nom
      `);
      
      preparateurId = newPrepResult.rows[0].id;
      console.log(`   ‚úÖ Pr√©parateur cr√©√©: ${newPrepResult.rows[0].nom} (ID: ${preparateurId})`);
    }
    
    // 3. Cr√©er 5 nouveaux dossiers de test
    console.log('\n3. üìÑ Cr√©ation de 5 dossiers de test...');
    
    const testDossiers = [
      {
        numero: 'TEST-001',
        client: 'Client Roland Test 1',
        type: 'roland',
        status: 'en_cours'
      },
      {
        numero: 'TEST-002', 
        client: 'Client Roland Test 2',
        type: 'roland',
        status: 'en_impression'
      },
      {
        numero: 'TEST-003',
        client: 'Client Xerox Test 1', 
        type: 'xerox',
        status: 'en_cours'
      },
      {
        numero: 'TEST-004',
        client: 'Client Roland Test 3',
        type: 'roland', 
        status: 'termine'
      },
      {
        numero: 'TEST-005',
        client: 'Client Xerox Test 2',
        type: 'xerox',
        status: 'a_revoir'
      }
    ];
    
    const createdDossiers = [];
    
    for (let i = 0; i < testDossiers.length; i++) {
      const dossier = testDossiers[i];
      
      const result = await query(`
        INSERT INTO dossiers (
          numero_commande, 
          client_nom, 
          type, 
          status,
          preparateur_id,
          created_at, 
          updated_at
        ) VALUES ($1, $2, $3, $4, $5, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)
        RETURNING *
      `, [dossier.numero, dossier.client, dossier.type, dossier.status, preparateurId]);
      
      const created = result.rows[0];
      createdDossiers.push(created);
      
      console.log(`   ‚úÖ ${created.numero_commande} | ${created.type} | ${created.status} | ID: ${created.id}`);
      
      // Ajouter une entr√©e d'historique initial
      await query(`
        INSERT INTO dossier_status_history (
          dossier_id, old_status, new_status, changed_by, changed_at, notes
        ) VALUES ($1, NULL, $2, $3, CURRENT_TIMESTAMP, 'Cr√©ation du dossier')
      `, [created.id, created.status, preparateurId]);
    }
    
    // 4. V√©rifier la cr√©ation
    console.log('\n4. üîç V√©rification des donn√©es cr√©√©es...');
    
    const countResult = await query('SELECT COUNT(*) as count FROM dossiers');
    const totalCreated = parseInt(countResult.rows[0].count);
    
    console.log(`   üìä Total dossiers cr√©√©s: ${totalCreated}`);
    
    // R√©partition par type
    const typeStats = await query(`
      SELECT type, COUNT(*) as count 
      FROM dossiers 
      GROUP BY type 
      ORDER BY type
    `);
    
    console.log('   üìà R√©partition par type:');
    typeStats.rows.forEach(stat => {
      console.log(`      ${stat.type}: ${stat.count} dossier(s)`);
    });
    
    // R√©partition par statut  
    const statusStats = await query(`
      SELECT status, COUNT(*) as count 
      FROM dossiers 
      GROUP BY status 
      ORDER BY status
    `);
    
    console.log('   üìà R√©partition par statut:');
    statusStats.rows.forEach(stat => {
      console.log(`      ${stat.status}: ${stat.count} dossier(s)`);
    });
    
    // 5. Test de visibilit√© par r√¥le
    console.log('\n5. üëÄ Test de visibilit√© par r√¥le...');
    
    // ADMIN - Tous les dossiers
    const adminView = await query('SELECT COUNT(*) as count FROM dossiers');
    console.log(`   üëë ADMIN voit: ${adminView.rows[0].count}/${totalCreated} dossiers`);
    
    // PR√âPARATEUR - Tous les dossiers (apr√®s correction)
    const prepView = await query('SELECT COUNT(*) as count FROM dossiers');
    console.log(`   üë®‚Äçüîß PR√âPARATEUR voit: ${prepView.rows[0].count}/${totalCreated} dossiers`);
    
    // IMPRIMEUR ROLAND - Type roland seulement
    const rolandView = await query(`SELECT COUNT(*) as count FROM dossiers WHERE type = 'roland'`);
    console.log(`   üñ®Ô∏è IMPRIMEUR ROLAND voit: ${rolandView.rows[0].count} dossiers Roland`);
    
    // IMPRIMEUR XEROX - Type xerox seulement  
    const xeroxView = await query(`SELECT COUNT(*) as count FROM dossiers WHERE type = 'xerox'`);
    console.log(`   üñ®Ô∏è IMPRIMEUR XEROX voit: ${xeroxView.rows[0].count} dossiers Xerox`);
    
    // 6. R√©sum√© final
    console.log('\n6. üéØ R√©sum√© des donn√©es de test:');
    console.log('=' .repeat(40));
    
    createdDossiers.forEach((dossier, index) => {
      console.log(`${index + 1}. üìÑ ${dossier.numero_commande}`);
      console.log(`   üë§ Client: ${dossier.client_nom}`);
      console.log(`   üè≠ Type: ${dossier.type}`);
      console.log(`   üìä Status: ${dossier.status}`);
      console.log(`   üë®‚Äçüîß Pr√©parateur ID: ${dossier.preparateur_id}`);
      console.log(`   üìÖ Cr√©√©: ${dossier.created_at}`);
      console.log('');
    });
    
    console.log('‚úÖ Base de donn√©es nettoy√©e et donn√©es de test cr√©√©es !');
    console.log('üß™ Pr√™t pour tester la synchronisation');
    console.log('üîÑ Tous les dossiers sont maintenant assign√©s au m√™me pr√©parateur');
    
  } catch (error) {
    console.error('\n‚ùå Erreur lors du nettoyage/cr√©ation:', error.message);
    console.error('Stack trace:', error.stack);
  }
}

// Gestion des erreurs
process.on('uncaughtException', (error) => {
  console.error('‚ùå Erreur non g√©r√©e:', error);
  process.exit(1);
});

process.on('unhandledRejection', (error) => {
  console.error('‚ùå Promesse rejet√©e non g√©r√©e:', error);
  process.exit(1);
});

// Lancer le script
main().catch(console.error);