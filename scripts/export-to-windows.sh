#!/bin/bash

# =================================================
# Script d'exportation vers Windows - Plateforme d'Imprimerie
# PrÃ©pare un package complet pour dÃ©ploiement Windows
# =================================================

set -euo pipefail

# Couleurs pour l'affichage
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Variables
PROJECT_NAME="imprimerie"
EXPORT_DIR="windows-deployment"
TIMESTAMP=$(date +"%Y%m%d_%H%M%S")
ARCHIVE_NAME="imprimerie_windows_${TIMESTAMP}.tar.gz"

# Fonction d'affichage
log() {
    echo -e "${GREEN}[$(date +'%Y-%m-%d %H:%M:%S')] $1${NC}"
}

error() {
    echo -e "${RED}[ERREUR] $1${NC}" >&2
}

warning() {
    echo -e "${YELLOW}[ATTENTION] $1${NC}"
}

info() {
    echo -e "${BLUE}[INFO] $1${NC}"
}

# VÃ©rifier les prÃ©requis
check_requirements() {
    log "VÃ©rification des prÃ©requis pour l'exportation..."
    
    if ! command -v podman &> /dev/null; then
        error "Podman n'est pas installÃ©"
        exit 1
    fi
    
    if ! command -v tar &> /dev/null; then
        error "tar n'est pas disponible"
        exit 1
    fi
}

# Construire les images si nÃ©cessaire
build_images() {
    log "Construction des images pour l'exportation..."
    
    # Backend
    log "Construction de l'image backend..."
    podman build -t "${PROJECT_NAME}-backend:latest" -f backend/Dockerfile.podman backend/
    
    # Frontend
    log "Construction de l'image frontend..."
    podman build -t "${PROJECT_NAME}-frontend:latest" \
        --build-arg REACT_APP_API_URL="/api" \
        --build-arg REACT_APP_SOCKET_URL="" \
        -f frontend/Dockerfile.podman frontend/
    
    log "Images construites"
}

# Exporter les images
export_images() {
    log "Exportation des images Docker..."
    
    mkdir -p "$EXPORT_DIR/images"
    
    # Exporter les images en format tar
    podman save -o "$EXPORT_DIR/images/postgres.tar" docker.io/postgres:15-alpine
    podman save -o "$EXPORT_DIR/images/redis.tar" docker.io/redis:7-alpine
    podman save -o "$EXPORT_DIR/images/backend.tar" "${PROJECT_NAME}-backend:latest"
    podman save -o "$EXPORT_DIR/images/frontend.tar" "${PROJECT_NAME}-frontend:latest"
    
    log "Images exportÃ©es dans $EXPORT_DIR/images/"
}

# PrÃ©parer les fichiers de configuration
prepare_config_files() {
    log "PrÃ©paration des fichiers de configuration..."
    
    mkdir -p "$EXPORT_DIR/config"
    
    # Copier les fichiers de configuration essentiels
    cp podman-compose.yml "$EXPORT_DIR/"
    cp -r backend/ecosystem.config.js "$EXPORT_DIR/config/"
    cp backend/package.json "$EXPORT_DIR/config/backend-package.json"
    cp frontend/package.json "$EXPORT_DIR/config/frontend-package.json"
    
    # CrÃ©er un fichier .env pour Windows
    cat > "$EXPORT_DIR/.env.windows" << 'EOF'
# Configuration Windows pour la Plateforme d'Imprimerie
# Renommez ce fichier en .env aprÃ¨s avoir adaptÃ© les valeurs

# Base de donnÃ©es PostgreSQL
DB_HOST=postgres
DB_PORT=5432
DB_NAME=imprimerie_db
DB_USER=imprimerie_user
DB_PASSWORD=imprimerie_production_password_ultra_secure_2024

# JWT
JWT_SECRET=imprimerie_jwt_production_secret_ultra_secure_key_2024_never_share_this
JWT_EXPIRES_IN=24h

# Configuration
NODE_ENV=production
PORT=5001

# URLs (ajustez selon votre configuration Windows)
FRONTEND_URL=http://localhost:3001
BACKEND_URL=http://localhost:5001
REACT_APP_API_URL=http://localhost:5001/api
REACT_APP_SOCKET_URL=http://localhost:5001

# Limites
UPLOAD_MAX_SIZE=100mb
REQUEST_TIMEOUT=300s

# Redis (optionnel)
REDIS_HOST=redis
REDIS_PORT=6379
REDIS_PASSWORD=imprimerie_redis_password_2024
EOF
    
    log "Fichiers de configuration copiÃ©s"
}

# CrÃ©er les scripts Windows
create_windows_scripts() {
    log "CrÃ©ation des scripts Windows..."
    
    mkdir -p "$EXPORT_DIR/scripts"
    
    # Script de dÃ©marrage PowerShell
    cat > "$EXPORT_DIR/scripts/start.ps1" << 'EOF'
# Script de dÃ©marrage PowerShell pour la Plateforme d'Imprimerie
# NÃ©cessite Podman Desktop pour Windows

Write-Host "ðŸš€ DÃ©marrage de la Plateforme d'Imprimerie sur Windows" -ForegroundColor Green

# VÃ©rifier Podman
if (!(Get-Command podman -ErrorAction SilentlyContinue)) {
    Write-Error "Podman n'est pas installÃ©. Installez Podman Desktop depuis https://podman-desktop.io/"
    exit 1
}

# VÃ©rifier podman-compose
if (!(Get-Command podman-compose -ErrorAction SilentlyContinue)) {
    Write-Warning "podman-compose non trouvÃ©. Installation via pip..."
    pip install podman-compose
}

# CrÃ©er les rÃ©pertoires de donnÃ©es
Write-Host "CrÃ©ation des rÃ©pertoires de donnÃ©es..." -ForegroundColor Blue
New-Item -ItemType Directory -Force -Path "data\postgres", "data\uploads", "data\logs", "data\backups", "data\redis"

# Charger les images
Write-Host "Chargement des images Docker..." -ForegroundColor Blue
podman load -i images\postgres.tar
podman load -i images\redis.tar
podman load -i images\backend.tar
podman load -i images\frontend.tar

# DÃ©marrer les services
Write-Host "DÃ©marrage des services..." -ForegroundColor Blue
podman-compose -f podman-compose.yml up -d

# Attendre et vÃ©rifier
Start-Sleep -Seconds 15

Write-Host "âœ… Plateforme dÃ©marrÃ©e !" -ForegroundColor Green
Write-Host "Frontend: http://localhost:3001" -ForegroundColor Cyan
Write-Host "Backend API: http://localhost:5001" -ForegroundColor Cyan
Write-Host "API Docs: http://localhost:5001/api-docs" -ForegroundColor Cyan
EOF

    # Script d'arrÃªt PowerShell
    cat > "$EXPORT_DIR/scripts/stop.ps1" << 'EOF'
# Script d'arrÃªt PowerShell pour la Plateforme d'Imprimerie

Write-Host "ðŸ›‘ ArrÃªt de la Plateforme d'Imprimerie" -ForegroundColor Yellow

podman-compose -f podman-compose.yml down

Write-Host "âœ… Services arrÃªtÃ©s" -ForegroundColor Green
EOF

    # Script batch pour compatibilitÃ©
    cat > "$EXPORT_DIR/scripts/start.bat" << 'EOF'
@echo off
echo ðŸš€ DÃ©marrage de la Plateforme d'Imprimerie sur Windows
powershell -ExecutionPolicy Bypass -File scripts\start.ps1
pause
EOF

    cat > "$EXPORT_DIR/scripts/stop.bat" << 'EOF'
@echo off
echo ðŸ›‘ ArrÃªt de la Plateforme d'Imprimerie
powershell -ExecutionPolicy Bypass -File scripts\stop.ps1
pause
EOF

    log "Scripts Windows crÃ©Ã©s"
}

# CrÃ©er la documentation
create_documentation() {
    log "CrÃ©ation de la documentation..."
    
    cat > "$EXPORT_DIR/README_WINDOWS.md" << 'EOF'
# Plateforme d'Imprimerie - DÃ©ploiement Windows

## PrÃ©requis

1. **Podman Desktop** - TÃ©lÃ©chargez depuis [podman-desktop.io](https://podman-desktop.io/)
2. **Python 3.x** - Pour podman-compose
3. **Git** (optionnel) - Pour les mises Ã  jour

## Installation

### 1. Installer Podman Desktop
- TÃ©lÃ©chargez et installez Podman Desktop
- DÃ©marrez l'application et attendez que Podman soit initialisÃ©

### 2. Installer podman-compose
Ouvrez PowerShell en tant qu'administrateur :
```powershell
pip install podman-compose
```

### 3. PrÃ©parer le projet
1. Extrayez l'archive dans un dossier (ex: `C:\imprimerie`)
2. Renommez `.env.windows` en `.env`
3. Ajustez les variables dans `.env` si nÃ©cessaire

## DÃ©marrage

### Option 1: Scripts automatiques
Double-cliquez sur `scripts\start.bat` ou exÃ©cutez dans PowerShell :
```powershell
.\scripts\start.ps1
```

### Option 2: Manuel
```powershell
# Charger les images
podman load -i images\postgres.tar
podman load -i images\redis.tar
podman load -i images\backend.tar
podman load -i images\frontend.tar

# CrÃ©er les rÃ©pertoires
mkdir data\postgres, data\uploads, data\logs, data\backups, data\redis

# DÃ©marrer
podman-compose up -d
```

## AccÃ¨s

- **Frontend**: http://localhost:3001
- **Backend API**: http://localhost:5001
- **Documentation API**: http://localhost:5001/api-docs

## ArrÃªt

Double-cliquez sur `scripts\stop.bat` ou :
```powershell
.\scripts\stop.ps1
```

## DÃ©pannage

### ProblÃ¨me de ports
Si les ports 3001 ou 5001 sont occupÃ©s, modifiez dans `podman-compose.yml` :
```yaml
ports:
  - "3002:80"  # Frontend sur port 3002
  - "5002:5001"  # Backend sur port 5002
```

### ProblÃ¨me de permissions
Assurez-vous que Podman Desktop est dÃ©marrÃ© et que les services Windows sont actifs.

### ProblÃ¨me de mÃ©moire
Augmentez la mÃ©moire allouÃ©e Ã  Podman dans les paramÃ¨tres de Podman Desktop.

## Structure des donnÃ©es

```
data/
â”œâ”€â”€ postgres/    # Base de donnÃ©es
â”œâ”€â”€ uploads/     # Fichiers uploadÃ©s
â”œâ”€â”€ logs/        # Logs de l'application
â”œâ”€â”€ backups/     # Sauvegardes
â””â”€â”€ redis/       # Cache Redis
```

## Support

- Documentation complÃ¨te : Consultez les fichiers MD dans le projet
- Logs : `podman-compose logs -f`
- Status : `podman-compose ps`
EOF

    log "Documentation crÃ©Ã©e"
}

# CrÃ©er l'archive finale
create_archive() {
    log "CrÃ©ation de l'archive finale..."
    
    # CrÃ©er l'archive tar.gz
    tar -czf "$ARCHIVE_NAME" -C "$EXPORT_DIR" .
    
    # Calculer la taille
    SIZE=$(du -h "$ARCHIVE_NAME" | cut -f1)
    
    log "Archive crÃ©Ã©e: $ARCHIVE_NAME ($SIZE)"
}

# Nettoyer les fichiers temporaires
cleanup() {
    log "Nettoyage..."
    
    # Garder l'archive, supprimer le rÃ©pertoire temporaire
    if [[ -d "$EXPORT_DIR" ]]; then
        rm -rf "$EXPORT_DIR"
    fi
    
    log "Nettoyage terminÃ©"
}

# Afficher le rÃ©sumÃ©
show_summary() {
    info "==========================================="
    info "ðŸ“¦ Export Windows terminÃ© !"
    info "==========================================="
    info "Archive: $ARCHIVE_NAME"
    info "Taille: $(du -h "$ARCHIVE_NAME" | cut -f1)"
    info "==========================================="
    info "Pour dÃ©ployer sur Windows:"
    info "1. TransfÃ©rez $ARCHIVE_NAME sur Windows"
    info "2. Extrayez l'archive"
    info "3. Installez Podman Desktop"
    info "4. ExÃ©cutez scripts/start.bat"
    info "==========================================="
}

# Fonction principale
main() {
    log "ðŸ“¦ Exportation vers Windows"
    
    check_requirements
    
    # Nettoyer le rÃ©pertoire d'export existant
    rm -rf "$EXPORT_DIR"
    
    build_images
    export_images
    prepare_config_files
    create_windows_scripts
    create_documentation
    create_archive
    cleanup
    show_summary
    
    log "âœ… Exportation terminÃ©e avec succÃ¨s !"
}

# ExÃ©cution
main "$@"