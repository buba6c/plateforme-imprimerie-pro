const express = require('express');
const router = express.Router();
const dbHelper = require("../utils/dbHelper");
const auth = require('../middleware/auth');
const pdfService = require('../services/pdfService');

router.get('/', auth, async (req, res) => {
  try {
    const { statut_paiement, limit = 50, offset = 0 } = req.query;
    let query = 'SELECT * FROM v_factures_complet WHERE 1=1';
    const params = [];
    
    if (req.user.role === 'preparateur') {
      query += ' AND user_id = ?';
      params.push(req.user.id);
    }
    if (statut_paiement) {
      query += ' AND statut_paiement = ?';
      params.push(statut_paiement);
    }
    
    query += ' ORDER BY created_at DESC LIMIT ? OFFSET ?';
    params.push(parseInt(limit), parseInt(offset));
    
    const [factures] = await dbHelper.query(query, params);
    res.json({ factures });
  } catch (error) {
    res.status(500).json({ error: 'Erreur serveur' });
  }
});

router.post('/generate', auth, async (req, res) => {
  try {
    const { dossier_id, mode_paiement, client_nom, client_contact, montant_ttc } = req.body;
    
    const [dossier] = await dbHelper.query('SELECT * FROM dossiers WHERE folder_id = ?', [dossier_id]);
    if (dossier.length === 0) return res.status(404).json({ error: 'Dossier non trouvé' });
    
    const [existing] = await dbHelper.query('SELECT * FROM factures WHERE dossier_id = ?', [dossier_id]);
    if (existing.length > 0) return res.status(400).json({ error: 'Facture existe déjà' });
    
    const montantTTC = parseFloat(montant_ttc);
    const montantHT = montantTTC / 1.18;
    const montantTVA = montantTTC - montantHT;
    
    const [result] = await dbHelper.query(
      `INSERT INTO factures (dossier_id, user_id, montant_ht, montant_tva, montant_ttc, client_nom, client_contact, mode_paiement, statut_paiement)
       VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)`,
      [dossier_id, dossier[0].user_id, montantHT.toFixed(2), montantTVA.toFixed(2), montantTTC.toFixed(2),
       client_nom || 'Client', client_contact, mode_paiement || 'especes', 'non_paye']
    );
    
    const [factureCreated] = await dbHelper.query('SELECT * FROM v_factures_complet WHERE id = ?', [result.insertId]);
    
    try {
      const pdfPath = await pdfService.generateInvoicePDF(factureCreated[0]);
      await dbHelper.query('UPDATE factures SET pdf_path = ?, pdf_generated_at = NOW() WHERE id = ?', [pdfPath, result.insertId]);
    } catch (pdfError) {
      console.error('Erreur PDF:', pdfError);
    }
    
    res.status(201).json({ message: 'Facture générée', facture: factureCreated[0] });
  } catch (error) {
    res.status(500).json({ error: 'Erreur serveur' });
  }
});

router.get('/:id/pdf', auth, async (req, res) => {
  try {
    const [facture] = await dbHelper.query('SELECT * FROM v_factures_complet WHERE id = ?', [req.params.id]);
    if (facture.length === 0) return res.status(404).json({ error: 'Facture non trouvée' });
    
    if (!facture[0].pdf_path) {
      const pdfPath = await pdfService.generateInvoicePDF(facture[0]);
      await dbHelper.query('UPDATE factures SET pdf_path = ?, pdf_generated_at = NOW() WHERE id = ?', [pdfPath, req.params.id]);
      return res.download(pdfPath, `${facture[0].numero}.pdf`);
    }
    
    res.download(facture[0].pdf_path, `${facture[0].numero}.pdf`);
  } catch (error) {
    res.status(500).json({ error: 'Erreur serveur' });
  }
});

module.exports = router;
