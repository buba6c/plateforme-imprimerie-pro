const express = require('express');
const router = express.Router();
const dbHelper = require("../utils/dbHelper");
const auth = require('../middleware/auth');
const openaiService = require('../services/openaiService');

router.get('/', auth, async (req, res) => {
  try {
    const { type_machine, categorie } = req.query;
    let query = 'SELECT * FROM tarifs_config WHERE actif = TRUE';
    const params = [];
    
    if (type_machine) {
      query += ' AND type_machine = ?';
      params.push(type_machine);
    }
    if (categorie) {
      query += ' AND categorie = ?';
      params.push(categorie);
    }
    
    query += ' ORDER BY type_machine, categorie, label';
    const [tarifs] = await dbHelper.query(query, params);
    
    res.json({ tarifs });
  } catch (error) {
    res.status(500).json({ error: 'Erreur serveur' });
  }
});

router.put('/:id', auth, async (req, res) => {
  try {
    if (req.user.role !== 'admin') {
      return res.status(403).json({ error: 'Accès réservé aux administrateurs' });
    }
    
    const { valeur, label, description, actif } = req.body;
    const updates = [];
    const params = [];
    
    if (valeur !== undefined) { updates.push('valeur = ?'); params.push(valeur); }
    if (label !== undefined) { updates.push('label = ?'); params.push(label); }
    if (description !== undefined) { updates.push('description = ?'); params.push(description); }
    if (actif !== undefined) { updates.push('actif = ?'); params.push(actif); }
    
    params.push(req.params.id);
    
    await dbHelper.query(`UPDATE tarifs_config SET ${updates.join(', ')}, updated_at = NOW() WHERE id = ?`, params);
    res.json({ message: 'Tarif mis à jour' });
  } catch (error) {
    res.status(500).json({ error: 'Erreur serveur' });
  }
});

router.post('/optimize-ai', auth, async (req, res) => {
  try {
    if (req.user.role !== 'admin') {
      return res.status(403).json({ error: 'Accès réservé aux administrateurs' });
    }
    
    const [tarifs] = await dbHelper.query('SELECT * FROM tarifs_config WHERE actif = TRUE');
    const [stats] = await dbHelper.query(`
      SELECT 
        COUNT(*) as total_dossiers,
        AVG(CASE WHEN statut = 'termine' THEN 1 ELSE 0 END) as taux_reussite,
        machine_type
      FROM dossiers 
      GROUP BY machine_type
    `);
    
    const result = await openaiService.optimizePricing(tarifs, stats);
    res.json(result);
  } catch (error) {
    res.status(500).json({ error: 'Erreur serveur' });
  }
});

module.exports = router;
