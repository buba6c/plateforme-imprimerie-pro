import React, { useState, useEffect, useCallback } from 'react';
import PropTypes from 'prop-types';
import {
  XMarkIcon,
  ClockIcon,
  TruckIcon,
  ExclamationTriangleIcon,
  CheckCircleIcon,
  ArrowDownTrayIcon,
  ClipboardDocumentListIcon,
  EyeIcon,
  TrashIcon,
} from '@heroicons/react/24/outline';
import { dossiersService } from '../../services/apiAdapter';
import filesService from '../../services/filesService';
import FileUpload from '../files/FileUpload';
import FileViewer from '../files/FileViewer';
import FileThumbnail from '../files/FileThumbnailSimple';
import { useAuth } from '../../context/AuthContext';
import {
  getAvailableActions,
  mapAppRoleToAdapter,
  mapAppStatusToAdapter,
  mapAdapterStatusToApp,
} from '../../workflow-adapter';
import { normalizeDossier } from '../../services/dossierNormalizer';

const DossierDetailsTabbed = ({ dossierId, dossier: dossierProp = null, isOpen, onClose, onStatusChange }) => {
  const { user } = useAuth();
  const [activeTab, setActiveTab] = useState('general');
  const [dossier, setDossier] = useState(dossierProp ? normalizeDossier(dossierProp) : null);
  const [files, setFiles] = useState([]);
  const [statutHistory, setStatutHistory] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');
  const [changingStatut, setChangingStatut] = useState(false);
  const [reviewComment, setReviewComment] = useState('');
  const [showReviewModal, setShowReviewModal] = useState(false);
  const [uploadingFiles, setUploadingFiles] = useState(false);
  const [showUpload, setShowUpload] = useState(false);
  const [loadingFiles, setLoadingFiles] = useState(false);
  const [showFileViewer, setShowFileViewer] = useState(false);
  const [selectedFile, setSelectedFile] = useState(null);

  // Determine form type (Roland or Xerox)
  const formType = (dossier?.type_formulaire || dossier?.machine || dossier?.type || '').toLowerCase();
  const isRoland = formType.includes('roland');
  const isXerox = formType.includes('xerox');

  // Format date with time
  const formatDateTime = dateString => {
    try {
      if (!dateString) return 'Date inconnue';
      return new Date(dateString).toLocaleString('fr-FR', {
        day: '2-digit',
        month: 'short',
        year: 'numeric',
        hour: '2-digit',
        minute: '2-digit',
      });
    } catch {
      return 'Date invalide';
    }
  };

  const formatDateSafe = dateString => {
    try {
      if (!dateString) return 'Date inconnue';
      return new Date(dateString).toLocaleDateString('fr-FR', {
        day: '2-digit',
        month: '2-digit',
        year: 'numeric',
        hour: '2-digit',
        minute: '2-digit',
      });
    } catch {
      return 'Date invalide';
    }
  };

  // Get colored badge for status
  const getStatusBadge = (status) => {
    const statusConfig = {
      en_cours: { color: 'bg-blue-100 text-blue-800 border-blue-300', icon: '📋', label: 'En cours' },
      a_revoir: { color: 'bg-orange-100 text-orange-800 border-orange-300', icon: '⚠️', label: 'À revoir' },
      en_impression: { color: 'bg-purple-100 text-purple-800 border-purple-300', icon: '🖨️', label: 'En impression' },
      pret_livraison: { color: 'bg-indigo-100 text-indigo-800 border-indigo-300', icon: '📦', label: 'Prêt livraison' },
      en_livraison: { color: 'bg-yellow-100 text-yellow-800 border-yellow-300', icon: '🚚', label: 'En livraison' },
      livre: { color: 'bg-success-100 text-green-800 border-green-300', icon: '✅', label: 'Livré' },
      termine: { color: 'bg-success-100 text-green-800 border-green-300', icon: '✅', label: 'Terminé' },
    };
    
    const config = statusConfig[status] || { 
      color: 'bg-neutral-100 dark:bg-neutral-800 text-neutral-800 dark:text-neutral-100 border-neutral-300 dark:border-neutral-600', 
      icon: '📋', 
      label: status 
    };
    
    return (
      <span className={`inline-flex items-center gap-2 px-4 py-2 rounded-lg font-semibold text-sm border-2 ${config.color}`}>
        <span>{config.icon}</span>
        {config.label}
      </span>
    );
  };

  // Load dossier details
  const loadDossierDetails = useCallback(async () => {\n    const effectiveId = dossierId || dossierProp?.folder_id || dossierProp?.id;\n    if (!effectiveId) return;\n    \n    try {\n      setLoading(true);\n      setError('');\n      const response = await dossiersService.getDossier(effectiveId);\n      const raw = response?.dossier || response;\n      const normalized = normalizeDossier(raw);\n      setDossier(normalized);\n\n      const dossierFiles = response.files || raw?.fichiers || [];\n      setFiles(dossierFiles);\n\n      if (dossierFiles.length === 0) {\n        try {\n          const filesResponse = await filesService.getFiles(dossierId);\n          setFiles(filesResponse.files || []);\n        } catch (err) {\n          console.warn('Impossible de charger les fichiers:', err);\n        }\n      }\n\n      setStatutHistory(response.statut_history || raw?.historique || []);\n    } catch (err) {\n      const status = err?.response?.status;\n      let userMessage;\n      if (status === 401) {\n        userMessage = 'Session expirée - Veuillez vous reconnecter';\n      } else if (status === 404) {\n        userMessage = \"Ce dossier n'existe pas ou a été supprimé.\";\n      } else if (status === 403) {\n        userMessage = \"Vous n'avez pas les permissions pour consulter ce dossier.\";\n      } else {\n        userMessage = err?.response?.data?.message || 'Erreur lors du chargement des détails';\n      }\n      setError(userMessage);\n    } finally {\n      setLoading(false);\n    }\n  }, [dossierId, dossierProp?.folder_id, dossierProp?.id]);\n\n  const loadFiles = useCallback(async () => {\n    const effectiveId = dossierId || dossierProp?.folder_id || dossierProp?.id;\n    if (!effectiveId) return;\n    \n    try {\n      setLoadingFiles(true);\n      const response = await filesService.getFiles(effectiveId);\n      const files = response.files || response || [];\n      setFiles(files);\n      setError('');\n    } catch (err) {\n      console.error('❌ Erreur chargement fichiers dossier', dossierId, err);\n      setError('Erreur lors du chargement des fichiers');\n    } finally {\n      setLoadingFiles(false);\n    }\n  }, [dossierId, dossierProp?.folder_id, dossierProp?.id]);\n\n  useEffect(() => {\n    if (isOpen) {\n      loadDossierDetails();\n      loadFiles();\n    }\n  }, [isOpen, loadDossierDetails, loadFiles]);\n\n  const handleFileUpload = async selected => {\n    try {\n      setUploadingFiles(true);\n      await filesService.uploadFiles(dossierId, selected);\n      setTimeout(async () => {\n        await loadFiles();\n      }, 500);\n      setShowUpload(false);\n    } catch (err) {\n      console.error('❌ Erreur upload fichiers:', err);\n      setError(err?.error || \"Erreur lors de l'upload des fichiers\");\n    } finally {\n      setUploadingFiles(false);\n    }\n  };\n\n  const canUploadFiles = () => {\n    if (!dossier || !user) return false;\n    if (user.role === 'admin') return true;\n\n    if (user.role === 'preparateur') {\n      const isOwner = dossier.created_by === user.id || dossier.createdById === user.id;\n      if (!isOwner) return false;\n\n      const allowedStatusesBase = ['en_cours', 'a_revoir'];\n      if (dossier.valide_preparateur || dossier.validated) {\n        return dossier.status === 'a_revoir';\n      } else {\n        return allowedStatusesBase.includes(dossier.status);\n      }\n    }\n\n    if (user.role === 'imprimeur_roland' || user.role === 'imprimeur_xerox') {\n      const machineType = (dossier.type_formulaire || dossier.machine || '').toLowerCase();\n      const requiredMachine = user.role === 'imprimeur_roland' ? 'roland' : 'xerox';\n      \n      if (machineType.includes(requiredMachine)) {\n        const allowedStatuses = ['en_impression', 'termine', 'en_cours'];\n        return allowedStatuses.includes(dossier.status || dossier.statut);\n      }\n      return false;\n    }\n\n    if (user.role === 'livreur') {\n      const allowedStatuses = ['pret_livraison', 'en_livraison', 'livre', 'termine'];\n      const status = (dossier.status || dossier.statut || '').toLowerCase().replace(/\\s/g, '_');\n      return allowedStatuses.includes(status);\n    }\n\n    return false;\n  };\n\n  if (!isOpen) return null;\n\n  if (loading) {\n    return (\n      <div className=\"fixed inset-0 z-50 overflow-y-auto\">\n        <div className=\"flex items-center justify-center min-h-screen pt-4 px-4 pb-20\">\n          <div className=\"fixed inset-0 bg-neutral-500 bg-opacity-75\"></div>\n          <div className=\"relative bg-white dark:bg-neutral-800 rounded-lg p-8\">\n            <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto\"></div>\n            <p className=\"text-center mt-4 text-neutral-600\">Chargement...</p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (!dossier || error) {\n    return (\n      <div className=\"fixed inset-0 z-50 overflow-y-auto\">\n        <div className=\"flex items-center justify-center min-h-screen pt-4 px-4 pb-20\">\n          <button\n            type=\"button\"\n            aria-label=\"Fermer la fenêtre\"\n            className=\"fixed inset-0 bg-neutral-500 bg-opacity-75 cursor-pointer\"\n            onClick={onClose}\n          />\n          <div className=\"relative bg-white dark:bg-neutral-800 rounded-lg p-8\">\n            <div className=\"text-center\">\n              <ExclamationTriangleIcon className=\"h-12 w-12 text-danger-400 mx-auto mb-4\" />\n              <h3 className=\"text-lg font-medium text-neutral-900 mb-2\">{error}</h3>\n              <button onClick={onClose} className=\"btn-primary mt-4\">\n                Fermer\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  // Render tab content\n  const renderTabContent = () => {\n    switch (activeTab) {\n      case 'general':\n        return (\n          <div className=\"space-y-6\">\n            <div className=\"bg-white rounded-xl shadow-sm border border-neutral-200 overflow-hidden\">\n              <div className=\"px-6 py-4 bg-gradient-to-r from-blue-50 to-indigo-50 border-b border-neutral-200\">\n                <h3 className=\"text-lg font-bold text-gray-900\">📋 Informations générales</h3>\n              </div>\n              <div className=\"p-6\">\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div>\n                    <label className=\"text-xs font-semibold text-gray-600 uppercase\">N° Commande</label>\n                    <p className=\"text-lg font-bold text-gray-900 mt-1\">\n                      {dossier.numero_commande || dossier.numero || 'N/A'}\n                    </p>\n                  </div>\n                  <div>\n                    <label className=\"text-xs font-semibold text-gray-600 uppercase\">Date de création</label>\n                    <p className=\"text-sm text-gray-900 mt-1\">{formatDateTime(dossier.created_at)}</p>\n                  </div>\n                  <div>\n                    <label className=\"text-xs font-semibold text-gray-600 uppercase\">Client</label>\n                    <p className=\"text-sm font-medium text-gray-900 mt-1\">\n                      {dossier.client_nom || dossier.client || 'N/A'}\n                    </p>\n                  </div>\n                  <div>\n                    <label className=\"text-xs font-semibold text-gray-600 uppercase\">Préparateur</label>\n                    <p className=\"text-sm text-gray-900 mt-1\">\n                      {dossier.created_by_name || dossier.preparateur || 'N/A'}\n                    </p>\n                  </div>\n                  <div>\n                    <label className=\"text-xs font-semibold text-gray-600 uppercase\">Type machine</label>\n                    <p className=\"text-sm text-gray-900 mt-1 flex items-center gap-2\">\n                      <span className={`px-3 py-1 rounded-full text-xs font-bold ${\n                        isRoland ? 'bg-error-100 text-error-700' : isXerox ? 'bg-blue-100 text-blue-700' : 'bg-neutral-100 text-neutral-700'\n                      }`}>\n                        {isRoland ? '🔴 Roland' : isXerox ? '🔵 Xerox' : dossier.type || 'N/A'}\n                      </span>\n                    </p>\n                  </div>\n                  <div>\n                    <label className=\"text-xs font-semibold text-gray-600 uppercase\">Statut actuel</label>\n                    <div className=\"mt-1\">{getStatusBadge(dossier.status)}</div>\n                  </div>\n                  {dossier.description && (\n                    <div className=\"md:col-span-2\">\n                      <label className=\"text-xs font-semibold text-gray-600 uppercase\">Description</label>\n                      <p className=\"text-sm text-gray-900 mt-2 p-4 bg-gray-50 rounded-lg border border-neutral-200\">\n                        {dossier.description}\n                      </p>\n                    </div>\n                  )}\n                </div>\n              </div>\n            </div>\n          </div>\n        );\n\n      case 'technical':\n        const formData = dossier.data_formulaire || {};\n        const hasData = Object.keys(formData).length > 0;\n\n        return (\n          <div className=\"space-y-6\">\n            <div className=\"bg-white rounded-xl shadow-sm border border-neutral-200 overflow-hidden\">\n              <div className={`px-6 py-4 border-b border-neutral-200 ${\n                isRoland ? 'bg-gradient-to-r from-red-50 to-pink-50' : 'bg-gradient-to-r from-blue-50 to-indigo-50'\n              }`}>\n                <h3 className=\"text-lg font-bold text-gray-900\">\n                  {isRoland ? '🔴 Détails techniques Roland' : isXerox ? '🔵 Détails techniques Xerox' : '⚙️ Détails techniques'}\n                </h3>\n              </div>\n              <div className=\"p-6\">\n                {hasData ? (\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    {Object.entries(formData).map(([key, value]) => {\n                      if (!value || value === 'non spécifié') return null;\n                      const label = key.replace(/_/g, ' ').replace(/\\b\\w/g, l => l.toUpperCase());\n                      return (\n                        <div key={key} className=\"bg-gray-50 rounded-lg p-4 border border-neutral-200\">\n                          <label className=\"text-xs font-semibold text-gray-600 uppercase\">{label}</label>\n                          <p className=\"text-sm text-gray-900 mt-1 font-medium\">{value}</p>\n                        </div>\n                      );\n                    })}\n                  </div>\n                ) : (\n                  <div className=\"text-center py-12\">\n                    <div className=\"inline-flex items-center justify-center w-16 h-16 bg-neutral-100 rounded-full mb-4\">\n                      <span className=\"text-3xl\">⚙️</span>\n                    </div>\n                    <p className=\"text-gray-600\">Aucune information technique disponible</p>\n                  </div>\n                )}\n              </div>\n            </div>\n          </div>\n        );\n\n      case 'files':\n        return (\n          <div className=\"space-y-6\">\n            <div className=\"bg-white rounded-xl shadow-sm border border-neutral-200 overflow-hidden\">\n              <div className=\"px-6 py-4 bg-gradient-to-r from-green-50 to-emerald-50 border-b border-neutral-200\">\n                <div className=\"flex items-center justify-between\">\n                  <h3 className=\"text-lg font-bold text-gray-900\">📁 Fichiers liés ({files.length})</h3>\n                  {canUploadFiles() && (\n                    <button\n                      onClick={() => setShowUpload(!showUpload)}\n                      className={`px-4 py-2 rounded-lg font-semibold text-sm transition-all ${\n                        showUpload\n                          ? 'bg-error-100 text-error-700 hover:bg-red-200'\n                          : 'bg-success-600 text-white hover:bg-success-700'\n                      }`}\n                      disabled={uploadingFiles}\n                    >\n                      {showUpload ? '❌ Annuler' : '📤 Ajouter fichiers'}\n                    </button>\n                  )}\n                </div>\n              </div>\n              <div className=\"p-6\">\n                {showUpload && canUploadFiles() && (\n                  <div className=\"mb-6 p-6 bg-success-50 rounded-xl border-2 border-dashed border-green-300\">\n                    <FileUpload\n                      onUpload={handleFileUpload}\n                      uploading={uploadingFiles}\n                      disabled={uploadingFiles}\n                    />\n                  </div>\n                )}\n\n                {files.length > 0 ? (\n                  <div className=\"grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4\">\n                    {files.map(file => {\n                      const isImage = file.type?.includes('image') || file.nom?.match(/\\.(jpg|jpeg|png|gif|webp)$/i);\n                      const isPdf = file.type?.includes('pdf') || file.nom?.match(/\\.pdf$/i);\n                      const canPreview = isImage || isPdf;\n\n                      return (\n                        <div key={file.id} className=\"bg-gray-50 rounded-lg p-4 border border-neutral-200 hover:shadow-md transition-shadow\">\n                          <div className=\"text-center mb-3\">\n                            <FileThumbnail\n                              file={file}\n                              size={80}\n                              onClick={() => {\n                                if (canPreview) {\n                                  setSelectedFile(file);\n                                  setShowFileViewer(true);\n                                }\n                              }}\n                            />\n                          </div>\n                          <p className=\"text-xs font-medium text-gray-900 truncate mb-2\">\n                            {file.original_filename || file.nom || 'Fichier'}\n                          </p>\n                          <div className=\"flex gap-2\">\n                            <button\n                              onClick={() => filesService.downloadFile(file.id)}\n                              className=\"flex-1 p-2 bg-blue-500 text-white rounded hover:bg-blue-600 transition-colors\"\n                              title=\"Télécharger\"\n                            >\n                              <ArrowDownTrayIcon className=\"h-4 w-4 mx-auto\" />\n                            </button>\n                            {canPreview && (\n                              <button\n                                onClick={() => {\n                                  setSelectedFile(file);\n                                  setShowFileViewer(true);\n                                }}\n                                className=\"flex-1 p-2 bg-success-500 text-white rounded hover:bg-success-600 transition-colors\"\n                                title=\"Aperçu\"\n                              >\n                                <EyeIcon className=\"h-4 w-4 mx-auto\" />\n                              </button>\n                            )}\n                            {user?.role === 'admin' && (\n                              <button\n                                onClick={() => {\n                                  if (window.confirm(`Supprimer \"${file.nom}\" ?`)) {\n                                    filesService.deleteFile(file.id).then(() => loadFiles());\n                                  }\n                                }}\n                                className=\"flex-1 p-2 bg-error-500 text-white rounded hover:bg-error-600 transition-colors\"\n                                title=\"Supprimer\"\n                              >\n                                <TrashIcon className=\"h-4 w-4 mx-auto\" />\n                              </button>\n                            )}\n                          </div>\n                        </div>\n                      );\n                    })}\n                  </div>\n                ) : (\n                  <div className=\"text-center py-12\">\n                    <div className=\"inline-flex items-center justify-center w-16 h-16 bg-neutral-100 rounded-full mb-4\">\n                      <span className=\"text-3xl\">📁</span>\n                    </div>\n                    <p className=\"text-gray-600 mb-4\">Aucun fichier disponible</p>\n                    {canUploadFiles() && (\n                      <button onClick={() => setShowUpload(true)} className=\"btn-primary\">\n                        Ajouter des fichiers\n                      </button>\n                    )}\n                  </div>\n                )}\n\n                {loadingFiles && (\n                  <div className=\"flex items-center justify-center py-8\">\n                    <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600\"></div>\n                    <span className=\"ml-3 text-gray-600\">Chargement des fichiers...</span>\n                  </div>\n                )}\n              </div>\n            </div>\n          </div>\n        );\n\n      case 'followup':\n        return (\n          <div className=\"space-y-6\">\n            <div className=\"bg-white rounded-xl shadow-sm border border-neutral-200 overflow-hidden\">\n              <div className=\"px-6 py-4 bg-gradient-to-r from-purple-50 to-pink-50 border-b border-neutral-200\">\n                <h3 className=\"text-lg font-bold text-gray-900\">📈 Suivi et Statut</h3>\n              </div>\n              <div className=\"p-6\">\n                <div className=\"mb-6\">\n                  <label className=\"text-sm font-semibold text-gray-600 mb-2 block\">Statut actuel</label>\n                  <div className=\"flex items-center gap-3\">\n                    {getStatusBadge(dossier.status)}\n                    {dossier.updated_at && (\n                      <span className=\"text-sm text-neutral-500\">\n                        Mis à jour le {formatDateTime(dossier.updated_at)}\n                      </span>\n                    )}\n                  </div>\n                </div>\n\n                <div className=\"mt-8\">\n                  <h4 className=\"text-sm font-bold text-gray-900 mb-4\">🔄 Progression du dossier</h4>\n                  <div className=\"space-y-4\">\n                    {[\n                      { status: 'en_cours', label: 'Créé' },\n                      { status: 'en_impression', label: 'Préparé' },\n                      { status: 'pret_livraison', label: 'Imprimé' },\n                      { status: 'en_livraison', label: 'En livraison' },\n                      { status: 'livre', label: 'Livré' },\n                    ].map((stage, index) => {\n                      const isComplete = statutHistory.some(h => h.nouveau_statut === stage.status || h.statut === stage.status);\n                      const isCurrent = dossier.status === stage.status;\n                      \n                      return (\n                        <div key={stage.status} className=\"flex items-center gap-4\">\n                          <div className={`flex-shrink-0 w-10 h-10 rounded-full flex items-center justify-center font-bold ${\n                            isCurrent\n                              ? 'bg-blue-600 text-white ring-4 ring-blue-200'\n                              : isComplete\n                              ? 'bg-success-500 text-white'\n                              : 'bg-neutral-200 text-neutral-500'\n                          }`}>\n                            {isComplete ? '✓' : index + 1}\n                          </div>\n                          <div className=\"flex-1\">\n                            <p className={`font-semibold ${\n                              isCurrent ? 'text-blue-600' : isComplete ? 'text-gray-900' : 'text-neutral-400'\n                            }`}>\n                              {stage.label}\n                            </p>\n                          </div>\n                        </div>\n                      );\n                    })}\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        );\n\n      case 'history':\n        const sortedHistory = [...statutHistory].sort((a, b) => \n          new Date(b.created_at || b.date_changement) - new Date(a.created_at || a.date_changement)\n        );\n\n        return (\n          <div className=\"space-y-6\">\n            <div className=\"bg-white rounded-xl shadow-sm border border-neutral-200 overflow-hidden\">\n              <div className=\"px-6 py-4 bg-gradient-to-r from-indigo-50 to-purple-50 border-b border-neutral-200\">\n                <h3 className=\"text-lg font-bold text-gray-900\">🕰️ Historique du dossier ({sortedHistory.length})</h3>\n              </div>\n              <div className=\"p-6\">\n                {sortedHistory.length > 0 ? (\n                  <div className=\"space-y-4\">\n                    {sortedHistory.map((entry, index) => {\n                      const status = entry.nouveau_statut || entry.statut;\n                      const author = entry.user_name || entry.utilisateur || entry.user || 'Système';\n                      const date = entry.created_at || entry.date_changement;\n                      const comment = entry.commentaire || entry.comment;\n\n                      return (\n                        <div\n                          key={index}\n                          className=\"bg-gray-50 rounded-lg p-4 border border-neutral-200 hover:shadow-md transition-shadow\"\n                        >\n                          <div className=\"flex items-start gap-4\">\n                            <div className=\"flex-shrink-0\">\n                              {getStatusBadge(status)}\n                            </div>\n                            <div className=\"flex-1\">\n                              <div className=\"flex items-center justify-between mb-2\">\n                                <p className=\"text-sm font-semibold text-gray-900\">Par {author}</p>\n                                <p className=\"text-xs text-neutral-500\">{formatDateTime(date)}</p>\n                              </div>\n                              {comment && (\n                                <p className=\"text-sm text-neutral-700 bg-white rounded p-3 border border-neutral-200\">\n                                  💬 {comment}\n                                </p>\n                              )}\n                            </div>\n                          </div>\n                        </div>\n                      );\n                    })}\n                  </div>\n                ) : (\n                  <div className=\"text-center py-12\">\n                    <div className=\"inline-flex items-center justify-center w-16 h-16 bg-neutral-100 rounded-full mb-4\">\n                      <span className=\"text-3xl\">🕰️</span>\n                    </div>\n                    <p className=\"text-gray-600\">Aucun historique disponible</p>\n                  </div>\n                )}\n              </div>\n            </div>\n          </div>\n        );\n\n      default:\n        return null;\n    }\n  };\n\n  return (\n    <div className=\"fixed inset-0 z-50 overflow-y-auto\">\n      <div className=\"flex items-center justify-center min-h-screen pt-4 px-4 pb-20 text-center sm:block sm:p-0\">\n        <button\n          type=\"button\"\n          aria-label=\"Fermer la fenêtre\"\n          className=\"fixed inset-0 bg-neutral-500 bg-opacity-75 transition-opacity cursor-pointer\"\n          onClick={onClose}\n        />\n        <div className=\"inline-block align-bottom bg-white dark:bg-neutral-800 rounded-2xl text-left overflow-hidden shadow-2xl transform transition-all sm:my-8 sm:align-middle sm:max-w-6xl sm:w-full border border-neutral-100 dark:border-neutral-700\">\n          {/* Header */}\n          <div className=\"bg-gradient-to-r from-primary-600 to-primary-700 px-8 py-6\">\n            <div className=\"flex flex-col md:flex-row md:items-center md:justify-between gap-4\">\n              <div className=\"flex items-center gap-4\">\n                <div className=\"bg-white bg-opacity-30 p-4 rounded-xl shadow-md\">\n                  <ClipboardDocumentListIcon className=\"h-8 w-8 text-white\" />\n                </div>\n                <div>\n                  <div className=\"flex items-center gap-2\">\n                    <h3 className=\"text-2xl font-extrabold text-white tracking-wide drop-shadow-lg\">\n                      {dossier.numero_commande || dossier.numero}\n                    </h3>\n                    {dossier.urgence && (\n                      <ExclamationTriangleIcon\n                        className=\"h-6 w-6 text-yellow-300 animate-bounce\"\n                        title=\"Urgence\"\n                      />\n                    )}\n                  </div>\n                  <p className=\"text-blue-100 text-lg font-medium mt-1\">\n                    {dossier.client_nom || dossier.client}\n                  </p>\n                  <div className=\"text-blue-200 text-sm mt-1\">\n                    Créé le {formatDateSafe(dossier.created_at)}\n                  </div>\n                </div>\n              </div>\n              <div className=\"flex items-center gap-4\">\n                {getStatusBadge(dossier.status)}\n                <button\n                  onClick={onClose}\n                  className=\"text-white hover:text-blue-200 transition-colors duration-150 p-2\"\n                  title=\"Fermer\"\n                >\n                  <XMarkIcon className=\"h-7 w-7\" />\n                </button>\n              </div>\n            </div>\n          </div>\n\n          {/* Tab Navigation */}\n          <div className=\"border-b border-neutral-200 bg-white dark:bg-neutral-800\">\n            <nav className=\"flex overflow-x-auto px-8\" aria-label=\"Onglets\">\n              {[\n                { id: 'general', label: 'Informations générales', icon: '📊' },\n                { id: 'technical', label: 'Détails techniques', icon: '⚙️' },\n                { id: 'files', label: 'Fichiers liés', icon: '📁', badge: files.length },\n                { id: 'followup', label: 'Suivi & Statut', icon: '📈' },\n                { id: 'history', label: 'Historique', icon: '🕰️', badge: statutHistory.length },\n              ].map(tab => (\n                <button\n                  key={tab.id}\n                  onClick={() => setActiveTab(tab.id)}\n                  className={`\n                    relative px-6 py-4 text-sm font-medium whitespace-nowrap transition-all duration-200\n                    ${activeTab === tab.id\n                      ? 'text-primary-600 border-b-2 border-blue-600 bg-primary-50'\n                      : 'text-neutral-500 hover:text-neutral-700 hover:bg-neutral-50 dark:bg-neutral-900'\n                    }\n                  `}\n                >\n                  <span className=\"flex items-center gap-2\">\n                    <span className=\"text-lg\">{tab.icon}</span>\n                    {tab.label}\n                    {tab.badge !== undefined && tab.badge > 0 && (\n                      <span className=\"ml-2 px-2 py-0.5 text-xs font-bold bg-primary-600 text-white rounded-full\">\n                        {tab.badge}\n                      </span>\n                    )}\n                  </span>\n                </button>\n              ))}\n            </nav>\n          </div>\n\n          {/* Tab Content */}\n          <div className=\"p-8 max-h-[600px] overflow-y-auto\">\n            {renderTabContent()}\n          </div>\n        </div>\n      </div>\n\n      {/* File Viewer Modal */}\n      <FileViewer\n        file={selectedFile}\n        isOpen={showFileViewer}\n        onClose={() => {\n          setShowFileViewer(false);\n          setSelectedFile(null);\n        }}\n      />\n\n      {/* Review Comment Modal */}\n      {showReviewModal && (\n        <div className=\"fixed inset-0 z-[60] flex items-center justify-center p-4\">\n          <div className=\"fixed inset-0 bg-black bg-opacity-50\" onClick={() => setShowReviewModal(false)} />\n          <div className=\"relative bg-white rounded-xl p-6 max-w-md w-full shadow-2xl\">\n            <h3 className=\"text-lg font-bold text-gray-900 mb-4\">💬 Commentaire de révision</h3>\n            <textarea\n              value={reviewComment}\n              onChange={e => setReviewComment(e.target.value)}\n              placeholder=\"Expliquez les modifications nécessaires...\"\n              className=\"w-full px-4 py-3 border border-neutral-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n              rows={4}\n            />\n            <div className=\"flex gap-3 mt-4\">\n              <button\n                onClick={() => setShowReviewModal(false)}\n                className=\"flex-1 px-4 py-2 bg-neutral-200 dark:bg-neutral-700 text-neutral-700 dark:text-neutral-200 rounded-lg hover:bg-neutral-300 font-semibold\"\n              >\n                Annuler\n              </button>\n              <button\n                onClick={() => {\n                  // Handle review submission\n                  setShowReviewModal(false);\n                }}\n                className=\"flex-1 px-4 py-2 bg-primary-600 text-white rounded-lg hover:bg-blue-700 font-semibold\"\n              >\n                Envoyer\n              </button>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nDossierDetailsTabbed.propTypes = {\n  dossierId: PropTypes.string,\n  dossier: PropTypes.object,\n  isOpen: PropTypes.bool,\n  onClose: PropTypes.func.isRequired,\n  onStatusChange: PropTypes.func,\n};\n\nDossierDetailsTabbed.defaultProps = {\n  dossierId: null,\n  isOpen: false,\n  onStatusChange: () => {},\n};\n\nexport default DossierDetailsTabbed;\n