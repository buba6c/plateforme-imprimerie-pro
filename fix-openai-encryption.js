/**
 * Script pour corriger le probl√®me de chiffrement de la cl√© OpenAI
 */

const dbHelper = require('./backend/utils/dbHelper');
const openaiService = require('./backend/services/openaiService');

console.log('=== CORRECTION CHIFFREMENT OPENAI ===\n');

(async () => {
  try {
    // 1. R√©cup√©rer la configuration actuelle
    console.log('1. R√©cup√©ration de la configuration actuelle...');
    const [configs] = await dbHelper.query('SELECT * FROM openai_config ORDER BY id DESC LIMIT 1');
    
    if (configs.length === 0) {
      console.log('‚ùå Aucune configuration OpenAI trouv√©e');
      process.exit(1);
    }
    
    const config = configs[0];
    console.log(`‚úÖ Configuration trouv√©e (ID: ${config.id})`);
    
    if (!config.api_key_encrypted || !config.api_key_iv) {
      console.log('‚ùå Aucune cl√© API chiffr√©e trouv√©e dans la configuration');
      console.log('üìã Veuillez configurer une nouvelle cl√© API depuis l\'interface admin');
      process.exit(1);
    }
    
    // 2. Tentative de test de la cl√© actuelle
    console.log('\n2. Test de la cl√© API actuelle...');
    try {
      const client = await openaiService.getOpenAIClient();
      if (client) {
        console.log('‚úÖ La cl√© API fonctionne d√©j√† correctement');
        process.exit(0);
      }
    } catch (error) {
      console.log('‚ùå La cl√© API actuelle ne peut pas √™tre d√©chiffr√©e');
    }
    
    // 3. Demander une nouvelle cl√© API
    console.log('\n3. Pour corriger le probl√®me, vous devez:');
    console.log('   1. Aller dans l\'interface admin');
    console.log('   2. Acc√©der aux Param√®tres OpenAI');
    console.log('   3. Saisir √† nouveau votre cl√© API OpenAI');
    console.log('   4. Cliquer sur "Tester la connexion"');
    console.log('   5. Sauvegarder la configuration');
    console.log('\n‚ö†Ô∏è  Cela rechiffrera automatiquement la cl√© avec la bonne cl√© de chiffrement');
    
    // 4. Alternative: r√©initialiser la configuration pour forcer une nouvelle saisie
    console.log('\n4. Ou bien, r√©initialiser automatiquement la configuration:');
    const readline = require('readline');
    const rl = readline.createInterface({
      input: process.stdin,
      output: process.stdout
    });
    
    rl.question('Voulez-vous r√©initialiser la configuration OpenAI (O/N)? ', async (answer) => {
      if (answer.toLowerCase() === 'o' || answer.toLowerCase() === 'oui') {
        try {
          // R√©initialiser seulement les champs de cl√© API
          await dbHelper.query(`
            UPDATE openai_config 
            SET api_key_encrypted = NULL, 
                api_key_iv = NULL, 
                is_active = FALSE,
                updated_at = NOW() 
            WHERE id = $1
          `, [config.id]);
          
          console.log('‚úÖ Configuration r√©initialis√©e avec succ√®s');
          console.log('üìã Vous devez maintenant configurer une nouvelle cl√© API depuis l\'interface admin');
        } catch (error) {
          console.error('‚ùå Erreur lors de la r√©initialisation:', error.message);
        }
      } else {
        console.log('‚ÑπÔ∏è  Configuration non modifi√©e');
        console.log('üìã Configurez manuellement une nouvelle cl√© API depuis l\'interface admin');
      }
      
      rl.close();
      process.exit(0);
    });
    
  } catch (error) {
    console.error('‚ùå Erreur:', error.message);
    process.exit(1);
  }
})();