# ===============================================
# Script de d√©marrage manuel de la plateforme
# Plateforme d'Imprimerie Num√©rique
# ===============================================

param(
    [string]$PlatformPath = "C:\Imprimerie-Platform",
    [switch]$Status,
    [switch]$Stop,
    [switch]$Restart,
    [switch]$Logs
)

Write-Host "=== CONTR√îLE DE LA PLATEFORME D'IMPRIMERIE ===" -ForegroundColor Green

# Fonction pour obtenir l'adresse IP locale
function Get-LocalIP {
    $localIP = (Get-NetIPAddress -AddressFamily IPv4 | Where-Object {$_.InterfaceAlias -like "*Ethernet*" -or $_.InterfaceAlias -like "*Wi-Fi*"} | Where-Object {$_.IPAddress -like "192.168.*" -or $_.IPAddress -like "10.*" -or $_.IPAddress -like "172.*"}).IPAddress | Select-Object -First 1
    if (!$localIP) {
        $localIP = (Get-NetIPAddress -AddressFamily IPv4 | Where-Object {$_.InterfaceAlias -notlike "*Loopback*"}).IPAddress | Select-Object -First 1
    }
    return $localIP
}

if (!(Test-Path $PlatformPath)) {
    Write-Host "‚ùå R√©pertoire de la plateforme non trouv√©: $PlatformPath" -ForegroundColor Red
    Write-Host "Utilisez d'abord setup-platform.ps1 pour installer la plateforme" -ForegroundColor Yellow
    exit 1
}

Set-Location $PlatformPath

if ($Status) {
    Write-Host "`nüìä STATUT DE LA PLATEFORME" -ForegroundColor Cyan
    
    # V√©rifier le service Windows
    $service = Get-Service -Name "ImprimerieService" -ErrorAction SilentlyContinue
    if ($service) {
        Write-Host "Service Windows: $($service.Status)" -ForegroundColor $(if ($service.Status -eq "Running") { "Green" } else { "Red" })
    } else {
        Write-Host "Service Windows: Non configur√©" -ForegroundColor Yellow
    }
    
    # V√©rifier PM2
    try {
        $pm2Status = pm2 jlist | ConvertFrom-Json
        Write-Host "`nProcessus PM2:" -ForegroundColor Cyan
        foreach ($process in $pm2Status) {
            $color = if ($process.pm2_env.status -eq "online") { "Green" } else { "Red" }
            Write-Host "  - $($process.name): $($process.pm2_env.status)" -ForegroundColor $color
        }
    } catch {
        Write-Host "PM2: Non accessible" -ForegroundColor Red
    }
    
    # Test de connectivit√©
    Write-Host "`nüåê CONNECTIVIT√â:" -ForegroundColor Cyan
    $localIP = Get-LocalIP
    
    try {
        $response = Invoke-WebRequest -Uri "http://localhost:3001" -TimeoutSec 3 -UseBasicParsing
        Write-Host "  ‚úì Frontend local: http://localhost:3001" -ForegroundColor Green
    } catch {
        Write-Host "  ‚ùå Frontend local: Inaccessible" -ForegroundColor Red
    }
    
    try {
        $response = Invoke-WebRequest -Uri "http://localhost:5001/api/health" -TimeoutSec 3 -UseBasicParsing
        Write-Host "  ‚úì Backend local: http://localhost:5001" -ForegroundColor Green
    } catch {
        Write-Host "  ‚ùå Backend local: Inaccessible" -ForegroundColor Red
    }
    
    try {
        $response = Invoke-WebRequest -Uri "http://$localIP:3001" -TimeoutSec 3 -UseBasicParsing
        Write-Host "  ‚úì Acc√®s r√©seau: http://$localIP:3001" -ForegroundColor Green
    } catch {
        Write-Host "  ‚ùå Acc√®s r√©seau: Non accessible depuis $localIP" -ForegroundColor Red
    }
    
    exit 0
}

if ($Stop) {
    Write-Host "`n‚èπÔ∏è ARR√äT DE LA PLATEFORME" -ForegroundColor Yellow
    
    try {
        pm2 stop all
        Write-Host "‚úì Processus PM2 arr√™t√©s" -ForegroundColor Green
        
        $service = Get-Service -Name "ImprimerieService" -ErrorAction SilentlyContinue
        if ($service -and $service.Status -eq "Running") {
            Stop-Service -Name "ImprimerieService"
            Write-Host "‚úì Service Windows arr√™t√©" -ForegroundColor Green
        }
        
        Write-Host "‚úÖ Plateforme arr√™t√©e avec succ√®s" -ForegroundColor Green
    } catch {
        Write-Host "‚ùå Erreur lors de l'arr√™t: $_" -ForegroundColor Red
    }
    
    exit 0
}

if ($Restart) {
    Write-Host "`nüîÑ RED√âMARRAGE DE LA PLATEFORME" -ForegroundColor Cyan
    
    try {
        Write-Host "Arr√™t des services..." -ForegroundColor Yellow
        pm2 stop all
        Start-Sleep -Seconds 3
        
        Write-Host "Red√©marrage des services..." -ForegroundColor Yellow
        pm2 start ecosystem.config.js
        
        $service = Get-Service -Name "ImprimerieService" -ErrorAction SilentlyContinue
        if ($service) {
            Restart-Service -Name "ImprimerieService"
        }
        
        Write-Host "‚úÖ Plateforme red√©marr√©e avec succ√®s" -ForegroundColor Green
        
        # Attendre et tester
        Start-Sleep -Seconds 10
        Write-Host "`nTest de connectivit√©..." -ForegroundColor Cyan
        try {
            $response = Invoke-WebRequest -Uri "http://localhost:3001" -TimeoutSec 5 -UseBasicParsing
            Write-Host "‚úì Frontend accessible" -ForegroundColor Green
        } catch {
            Write-Host "‚ùå Frontend non accessible" -ForegroundColor Red
        }
        
    } catch {
        Write-Host "‚ùå Erreur lors du red√©marrage: $_" -ForegroundColor Red
    }
    
    exit 0
}

if ($Logs) {
    Write-Host "`nüìã LOGS DE LA PLATEFORME" -ForegroundColor Cyan
    Write-Host "Appuyez sur Ctrl+C pour arr√™ter" -ForegroundColor Yellow
    pm2 logs
    exit 0
}

# D√©marrage par d√©faut
Write-Host "`nüöÄ D√âMARRAGE DE LA PLATEFORME" -ForegroundColor Cyan

try {
    # V√©rifier que les d√©pendances sont install√©es
    if (!(Get-Command pm2 -ErrorAction SilentlyContinue)) {
        Write-Host "‚ùå PM2 non install√©. Utilisez install-dependencies.ps1 d'abord" -ForegroundColor Red
        exit 1
    }
    
    # D√©marrer avec PM2
    Write-Host "D√©marrage des processus PM2..." -ForegroundColor Yellow
    pm2 start ecosystem.config.js
    
    # Sauvegarder la configuration
    pm2 save
    
    # D√©marrer le service Windows si configur√©
    $service = Get-Service -Name "ImprimerieService" -ErrorAction SilentlyContinue
    if ($service) {
        if ($service.Status -ne "Running") {
            Start-Service -Name "ImprimerieService"
            Write-Host "‚úì Service Windows d√©marr√©" -ForegroundColor Green
        } else {
            Write-Host "‚úì Service Windows d√©j√† en cours d'ex√©cution" -ForegroundColor Green
        }
    } else {
        Write-Host "‚ÑπÔ∏è Service Windows non configur√© (optionnel)" -ForegroundColor Cyan
    }
    
    Write-Host "‚úÖ Plateforme d√©marr√©e avec succ√®s" -ForegroundColor Green
    
    # Attendre et tester
    Write-Host "`nTest de d√©marrage..." -ForegroundColor Yellow
    Start-Sleep -Seconds 10
    
    $localIP = Get-LocalIP
    $success = $true
    
    try {
        $response = Invoke-WebRequest -Uri "http://localhost:3001" -TimeoutSec 5 -UseBasicParsing
        Write-Host "‚úì Frontend disponible: http://localhost:3001" -ForegroundColor Green
    } catch {
        Write-Host "‚ùå Frontend non accessible localement" -ForegroundColor Red
        $success = $false
    }
    
    try {
        $response = Invoke-WebRequest -Uri "http://localhost:5001/api/health" -TimeoutSec 5 -UseBasicParsing
        Write-Host "‚úì Backend disponible: http://localhost:5001" -ForegroundColor Green
    } catch {
        Write-Host "‚ùå Backend non accessible localement" -ForegroundColor Red
        $success = $false
    }
    
    if ($success) {
        Write-Host "`nüéâ PLATEFORME OP√âRATIONNELLE" -ForegroundColor Green
        Write-Host "Acc√®s local: http://localhost:3001" -ForegroundColor Cyan
        Write-Host "Acc√®s r√©seau: http://$localIP:3001" -ForegroundColor Cyan
        Write-Host "API Backend: http://$localIP:5001/api" -ForegroundColor Cyan
    } else {
        Write-Host "`n‚ö†Ô∏è La plateforme a d√©marr√© mais certains services ne r√©pondent pas" -ForegroundColor Yellow
        Write-Host "V√©rifiez les logs avec: pm2 logs" -ForegroundColor Yellow
    }
    
} catch {
    Write-Host "‚ùå Erreur lors du d√©marrage: $_" -ForegroundColor Red
    Write-Host "`nPour diagnostiquer:" -ForegroundColor Yellow
    Write-Host "1. V√©rifiez que PostgreSQL fonctionne" -ForegroundColor White
    Write-Host "2. V√©rifiez les logs: pm2 logs" -ForegroundColor White
    Write-Host "3. Testez la base de donn√©es avec test-platform.ps1" -ForegroundColor White
    exit 1
}

Write-Host "`nüí° Commandes utiles:" -ForegroundColor Yellow
Write-Host "  .\start-platform.ps1 -Status    # V√©rifier le statut" -ForegroundColor White
Write-Host "  .\start-platform.ps1 -Stop      # Arr√™ter la plateforme" -ForegroundColor White
Write-Host "  .\start-platform.ps1 -Restart   # Red√©marrer la plateforme" -ForegroundColor White
Write-Host "  .\start-platform.ps1 -Logs      # Voir les logs en temps r√©el" -ForegroundColor White